<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junqson</title>
  <subtitle>Fighting For Future</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.junqson.xin/"/>
  <updated>2018-11-18T06:17:11.338Z</updated>
  <id>http://www.junqson.xin/</id>
  
  <author>
    <name>Junqson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【总结】几种常见的开源协议</title>
    <link href="http://www.junqson.xin/2018/11/01/%E3%80%90%E8%BE%A8%E6%9E%90%E3%80%91%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    <id>http://www.junqson.xin/2018/11/01/【辨析】几种常见的开源协议/</id>
    <published>2018-11-01T08:58:17.000Z</published>
    <updated>2018-11-18T06:17:11.338Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>浏览Github开源项目的时候，我们可以看见很多协议，比如Apache License、GPL License等等。开源软件可以大大提高我们的工作效率，但是使用开源软件或多或少会受到一些限制；另外自己的项目也需要选择一个合适的开源协议。作为一名开发者，熟悉常见的开源协议是很有必要的。今天就来总结一下常见的开源协议。</p>
<h3 id="常见的开源协议"><a href="#常见的开源协议" class="headerlink" title="常见的开源协议"></a>常见的开源协议</h3><h4 id="Apache-License"><a href="#Apache-License" class="headerlink" title="Apache License"></a>Apache License</h4><p>Apache Licence是著名的非盈利开源组织Apache采用的协议。该协议和BSD类似，同样鼓励代码共享和尊重原作者的著作权，同样允许代码修改，再发布（作为开源或商业软件）。需要满足的条件也和BSD类似： </p>
<ul>
<li>需要给代码的用户一份Apache Licence </li>
<li>如果你修改了代码，需要再被修改的文件中说明。 </li>
<li>在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。 </li>
<li>如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。 </li>
</ul>
<p>Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售。</p>
<h4 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h4><h5 id="BSD-3-Clause-License"><a href="#BSD-3-Clause-License" class="headerlink" title="BSD (3-Clause) License"></a>BSD (3-Clause) License</h5><p>BSD允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售。<br>BSD鼓励代码共享的同时，要求尊重代码作者的著作权。<br>使用BSD协议，需要遵守以下规则： </p>
<ul>
<li>再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议；</li>
<li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档那个和版权声明中包含原来代码中的BSD协议; </li>
<li>不可以用开源代码的“作者/机构的名字”或“原来产品的名字”做市场推广。</li>
</ul>
<h5 id="BSD-2-Clause-License"><a href="#BSD-2-Clause-License" class="headerlink" title="BSD (2-Clause) License"></a>BSD (2-Clause) License</h5><p>与 “3-clause BSD license (BSD-3-Clause)” 的内容形似。</p>
<h4 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h4><h5 id="GPL-v2"><a href="#GPL-v2" class="headerlink" title="GPL v2"></a>GPL v2</h5><p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD, Apache Licence等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商业软件公司开发的免费软件了。<br>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。<br>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。<br>其它细节如再发布的时候需要伴随GPL协议等和BSD/Apache等类似。 </p>
<h5 id="GPL-v3"><a href="#GPL-v3" class="headerlink" title="GPL v3"></a>GPL v3</h5><p>GPL v3与GPL v2类似。区别在于，不仅要求用户公布修改的源代码，还要求公布相关硬件。</p>
<h4 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h4><h5 id="LGPL-v2-1"><a href="#LGPL-v2-1" class="headerlink" title="LGPL v2.1"></a>LGPL v2.1</h5><p>LGPL是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用/修改/衍生之GPL类库的的软件必须采用GPL协议不同。LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。<br>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。<br>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品 </p>
<h5 id="LGPL-v3"><a href="#LGPL-v3" class="headerlink" title="LGPL v3"></a>LGPL v3</h5><p>相对于LGPL v2，不仅要求用户公布修改的源代码，还要求公布相关硬件</p>
<h4 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h4><p>MIT许可证之名源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称「X条款」（X License）或「X11条款」（X11 License）<br>MIT内容与三条款BSD许可证（3-clause BSD license）内容颇为近似，但是赋予软体被授权人更大的权利与更少的限制。<br>被授权人有权利使用、复制、修改、合并、出版发行、散布、再授权及贩售软体及软体的副本。<br>被授权人可根据程式的需要修改授权条款为适当的内容。<br>在软件和软件的所有副本中都必须包含版权声明和许可声明。<br>此授权条款并非属copyleft的自由软体授权条款，允许在自由/开放源码软体或非自由软体（proprietary software）所使用。<br>此亦为MIT与BSD（The BSD license, 3-clause BSD license）本质上不同处。<br>MIT条款可与其他授权条款并存。另外，MIT条款也是自由软体基金会（FSF）所认可的自由软体授权条款，与GPL相容。</p>
<h4 id="Mozilla-Public-License"><a href="#Mozilla-Public-License" class="headerlink" title="Mozilla Public License"></a>Mozilla Public License</h4><p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对 源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同（因为都是符合OSIA 认定的开源软件许可证）。但是，相比而言MPL还有以下几个显著的不同之处: </p>
<ul>
<li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL 许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL 许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个 豁口。 </li>
<li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。 </li>
<li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码（除非他本人是 专利权人，并书面向公众免费许可这些源代码），也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。 </li>
<li>对源代码的定义 </li>
<li>而在MPL（1.1版本）许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择 取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’（原文为‘Script’），或者不是与初始 源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。” </li>
<li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li>
</ul>
<h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><p>我们如何快速选择我们想要的开源协议呢，阮一峰老师画了一张图我觉得很好，放在这里。<br><img src="/img/opensource.png" alt="常见开源协议的选择"></p>
<ul>
<li>第一次修改2018.11.1 17:20</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;浏览Github开源项目的时候，我们可以看见很多协议，比如Apache License、GPL License等等。开源软件可以大大提高我们
    
    </summary>
    
      <category term="总结" scheme="http://www.junqson.xin/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="软件" scheme="http://www.junqson.xin/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="开源" scheme="http://www.junqson.xin/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>【辨析】String.intern()分析</title>
    <link href="http://www.junqson.xin/2018/10/22/%E3%80%90%E8%BE%A8%E6%9E%90%E3%80%91String.intern()%E5%88%86%E6%9E%90/"/>
    <id>http://www.junqson.xin/2018/10/22/【辨析】String.intern()分析/</id>
    <published>2018-10-22T08:17:17.000Z</published>
    <updated>2018-10-22T08:18:34.156Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于String-intern"><a href="#关于String-intern" class="headerlink" title="关于String.intern()"></a>关于String.intern()</h3><p>最近在看《深入理解JAVA虚拟机》时，碰到一个String.intern()方法，在看这个方法的过程中，踩了一些坑，今天就整理在这里。</p>
<p>先看看jdk7官方文档是怎么说的</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> public String intern()</div><div class="line">Returns a canonical representation for the string object.</div><div class="line">A pool of strings, initially empty, is maintained privately by the class String.</div><div class="line"></div><div class="line">When the intern method is invoked, if the pool already contains a string equal to this String object as determined by the equals(Object) method, then the string from the pool is returned. Otherwise, this String object is added to the pool and a reference to this String object is returned.</div><div class="line"></div><div class="line">It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.</div><div class="line"></div><div class="line">All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the The Java™ Language Specification.</div><div class="line"></div><div class="line">Returns:</div><div class="line">a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings.</div></pre></td></tr></table></figure>
<p>大体意思就是如果常量池里面有equal方法为true的，就返回那个对象，否则将这个字符串放入常量池中，并返回。</p>
<h3 id="jdk6和jdk7对这个方法实现的差异"><a href="#jdk6和jdk7对这个方法实现的差异" class="headerlink" title="jdk6和jdk7对这个方法实现的差异"></a>jdk6和jdk7对这个方法实现的差异</h3><p>先来看看这段代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// sec1</span></div><div class="line">String str1 = <span class="keyword">new</span> StringBuilder(<span class="string">"计算机"</span>).append(<span class="string">"软件"</span>).toString();</div><div class="line">System.out.println(str1.intern() == str1);</div><div class="line"></div><div class="line"><span class="comment">// sec2</span></div><div class="line">String str2 = <span class="keyword">new</span> StringBUilder(<span class="string">"ja"</span>).append(<span class="string">"va"</span>).toString();</div><div class="line">System.out.println(str2.intern() == str2);</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// jdk6下</span></div><div class="line"></div><div class="line"><span class="keyword">false</span> <span class="comment">// sec1</span></div><div class="line"><span class="keyword">false</span> <span class="comment">// sec2</span></div><div class="line"></div><div class="line"><span class="comment">// jdk7下</span></div><div class="line"></div><div class="line"><span class="keyword">true</span> <span class="comment">// sec1</span></div><div class="line"><span class="keyword">false</span> <span class="comment">// sec2</span></div></pre></td></tr></table></figure></p>
<p>==<strong>为啥sec1的结果变化了?</strong>==</p>
<p>==<strong>为啥sec2的结果没有变化？</strong>==</p>
<p>String.intern()是个native方法，底层由C++实现。jdk6中常量池放在Perm空间中，实际上是一个类似于<strong>HashTable</strong>的结构。在调用intern()方法时，首先检查常量池中有没有eq为true的，如果有直接返回引用，否则<strong>将字符串拷贝到常量池</strong>中再返回其引用。一方面存在Perm空间有限，另一方面当常量池固定长度1009，当其中的字符串越来越多时，性能会急剧下降。</p>
<p>为了解决这个问题，jdk7及以后的实现中，将字符串常量池放在了<strong>Java堆</strong>中。当调用intern()方法时，有别于jdk6中的实现，不会再将该字符串拷贝到常量池中，而是仅在<strong>常量池记录下字符串首次出现的引用</strong>。这样做有利于复用对象，节省空间。<br>但是相对于jdk6的实现，时间效率稍微低一点。但是考虑到重复对象给gc带来的压力，这种时间上的损耗可以忽略不计。</p>
<p>所以不难发现，sec1中的代码在jdk6中Str1.intern()返回的实际上是str1在常量池中的拷贝。而jdk7，常量池仅仅记录了str1的引用。结果是不言而喻的。</p>
<p>sec2的代码为啥都返回false呢，这是因为在java中的关键字都是初始放在常量池中的，在sec2执行之前就已存在所以无论怎么调用intern()，结果都是false。</p>
<h3 id="字符串字面量和常量池"><a href="#字符串字面量和常量池" class="headerlink" title="字符串字面量和常量池"></a>字符串字面量和常量池</h3><p>考虑以下代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// sec1</span></div><div class="line">String s = <span class="keyword">new</span> String(<span class="string">"11"</span>);</div><div class="line">s.intern();</div><div class="line">String s2 = <span class="string">"11"</span>;</div><div class="line">System.out.println(s == s2);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// sec2</span></div><div class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"2"</span>) + <span class="keyword">new</span> String(<span class="string">"2"</span>);</div><div class="line">s3.intern();</div><div class="line">String s4 = <span class="string">"22"</span>;</div><div class="line">System.out.println(s3 == s4);</div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// jdk7</div><div class="line">fasle</div><div class="line">true</div></pre></td></tr></table></figure>
<p><strong>==为何相似的代码会有不同的结果？==</strong></p>
<p>问题的关键在于</p>
<blockquote>
<p>String s = new String(“11”);</p>
</blockquote>
<p>我们知道字符串字面量在解析的时候是放在常量池中的，<br>我们在new String(“11”)中的字面量也不例外，所以sec1<br>中的s.intern()实际返回的是自动放到常量池的“11”，也即s2指向的对象，s1是java堆中创建的另一对象，所以结果自然为false。</p>
<p>而sec2中的第一行相当于</p>
<blockquote>
<p>String s3 = new StringBuilder(“2”).append(“2”).toString();</p>
</blockquote>
<p>执行完后s3获得”22”,之后将其放入常量池中，str4中所指向的”22”和str3为同一对象。</p>
<ul>
<li>仓促之间，必有疏漏，还望指正</li>
<li>2018.10.22 16:15</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于String-intern&quot;&gt;&lt;a href=&quot;#关于String-intern&quot; class=&quot;headerlink&quot; title=&quot;关于String.intern()&quot;&gt;&lt;/a&gt;关于String.intern()&lt;/h3&gt;&lt;p&gt;最近在看《深入理解JAVA虚
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.junqson.xin/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.junqson.xin/tags/JVM/"/>
    
      <category term="API" scheme="http://www.junqson.xin/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>【源码】ArrayDeque</title>
    <link href="http://www.junqson.xin/2018/09/12/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91ArrayDeque/"/>
    <id>http://www.junqson.xin/2018/09/12/【源码】ArrayDeque/</id>
    <published>2018-09-12T13:44:40.000Z</published>
    <updated>2018-10-09T03:41:04.810Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#constfield">const&amp;field</a></li>
<li><a href="#构造器和容量相关">构造器和容量相关</a></li>
<li><a href="#size">size</a></li>
<li><a href="#add&amp;offer">add&amp;offer</a></li>
<li><a href="#poll&amp;remove">poll&amp;remove</a></li>
<li><a href="#get&amp;element&amp;peek">get&amp;element&amp;peek</a></li>
<li><a href="#clear">clear</a></li>
<li><a href="#Stack">Stack</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>线程不安全。队列里不许有空元素</li>
<li>动态数组实现的双向循环队列</li>
<li>继承AbstractCollection，实现Deque, Cloneable, Serializable接口</li>
<li>双端可操作，因此可单端操作作为栈，双端操作作为队列。</li>
<li>用作栈时比Stack快，用作队列时比LinkedList快</li>
<li>主要的插入移除方法为addFirst、addLast、pollFirst、pollLast，实现了Deque接口的方法，其他方法都是根据这些派生的。</li>
<li>循环队列具体实现细节：<ol>
<li>head指向第一个元素</li>
<li>tail指向最后一个元素的后一个位置</li>
<li>head == tail为空，add操作时head == nail队满自动扩容</li>
<li>head &lt; tail，下标区间[head,tail - 1]</li>
<li>head &gt; tail，下标区间[head,elements.length()-1] + [0, tail-1]</li>
</ol>
</li>
</ul>
<h3 id="const-amp-field"><a href="#const-amp-field" class="headerlink" title="const&amp;field"></a>const&amp;field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">数组里的元素有序，队列的容量就是这个数组的大小了，</span></div><div class="line"><span class="comment">应该是2的幂。数组不会放满，除了我们add的时候调用</span></div><div class="line"><span class="comment">doubleCapacity,防止首尾指针相遇的时候。</span></div><div class="line"><span class="comment">保证数组内非队列元素即null。</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">transient</span> Object[] elements; <span class="comment">//包访问权限</span></div><div class="line"></div><div class="line"><span class="comment">//最小的初始化容量。必须是2的幂，这里是8.</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_INITIAL_CAPACITY = <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="comment">//首尾指针</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> head;</div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> tail;</div></pre></td></tr></table></figure>
<h3 id="构造器和容量相关"><a href="#构造器和容量相关" class="headerlink" title="构造器和容量相关"></a>构造器和容量相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认 pow(2,4)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">()</span> </span>&#123;</div><div class="line">    elements = <span class="keyword">new</span> Object[<span class="number">16</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//分配最小的n = 2 ^ k，且满足n &gt; numElements</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allocateElements</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</div><div class="line">    elements = <span class="keyword">new</span> Object[calculateSize(numElements)];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</div><div class="line">    allocateElements(numElements);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayDeque</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    allocateElements(c.size());</div><div class="line">    addAll(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//实际计算空间的算法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateSize</span><span class="params">(<span class="keyword">int</span> numElements)</span> </span>&#123;</div><div class="line">    <span class="comment">//不能小于这个最小容量</span></div><div class="line">    <span class="keyword">int</span> initialCapacity = MIN_INITIAL_CAPACITY;</div><div class="line">   <span class="comment">//求n的算法，二进制运算</span></div><div class="line">    <span class="keyword">if</span> (numElements &gt;= initialCapacity) &#123;</div><div class="line">        <span class="comment">//假设第一位是1，后面无所谓。1</span></div><div class="line">        initialCapacity = numElements;</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">1</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">2</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">4</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt;  <span class="number">8</span>);</div><div class="line">        initialCapacity |= (initialCapacity &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">        <span class="comment">//经过一连串的运算，低位全部变成1，加1之后多一位1，后面全为0</span></div><div class="line">        initialCapacity++;</div><div class="line"></div><div class="line">        <span class="comment">//超过了int范围就无符号右移一位，int首位为1则为负数</span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)   </div><div class="line">            initialCapacity &gt;&gt;&gt;= <span class="number">1</span>; <span class="comment">//对于带符号的int来说就是2 ^ 30最大了</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> initialCapacity;</div><div class="line">&#125;</div><div class="line"><span class="comment">//双倍扩容</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">assert</span> head == tail; <span class="comment">//断言只有在head==tail即队满才能用</span></div><div class="line">    <span class="keyword">int</span> p = head;</div><div class="line">    <span class="keyword">int</span> n = elements.length;</div><div class="line">    <span class="keyword">int</span> r = n - p; <span class="comment">//head右边的元素个数</span></div><div class="line">    <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>; <span class="comment">//双倍容量</span></div><div class="line">    <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</div><div class="line">    Object[] a = <span class="keyword">new</span> Object[newCapacity];</div><div class="line">    System.arraycopy(elements, p, a, <span class="number">0</span>, r);</div><div class="line">    System.arraycopy(elements, <span class="number">0</span>, a, r, p);</div><div class="line">    elements = a;</div><div class="line">    head = <span class="number">0</span>; <span class="comment">//重新放到头上</span></div><div class="line">    tail = n;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><p>tail - head可能为负值，这样需要通过&amp;(element.length - 1)修正一下。<br>原理是这样的:</p>
<p>假设tail = 3，head = 6，tail - head = -3，element.length = 8</p>
<p>转化为二进制 </p>
<p>11111101 &amp; 00000111 = 0000101 = 5 = element.length - head + tail</p>
<p>因为element.length是2的幂，所以element.length-1，都是这样的形式00001111，可做掩码使用，截取element.length大小内的最后几位。这里简化修正是规定容量必须为2的幂的一个好处，当然2的幂的容量也可以提高内存分配的效率。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (tail - head) &amp; (elements.length - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="add-amp-offer"><a href="#add-amp-offer" class="headerlink" title="add&amp;offer"></a>add&amp;offer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//插到队首</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="comment">//修正head-1</span></div><div class="line">    elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;</div><div class="line">    <span class="keyword">if</span> (head == tail)</div><div class="line">        doubleCapacity();</div><div class="line">&#125;</div><div class="line"><span class="comment">//插到队尾</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    elements[tail] = e;</div><div class="line">    <span class="comment">//判满</span></div><div class="line">    <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</div><div class="line">        doubleCapacity();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***下面依托addX***</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addLast(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        addFirst(e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addLast(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//入队</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> offerLast(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="poll-amp-remove"><a href="#poll-amp-remove" class="headerlink" title="poll&amp;remove"></a>poll&amp;remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移除队首</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = head;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    E result = (E) elements[h];</div><div class="line">    <span class="comment">//队空为null</span></div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    elements[h] = <span class="keyword">null</span>; <span class="comment">//设空</span></div><div class="line">    head = (h + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="comment">//移除队尾</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> t = (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    E result = (E) elements[t];</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    elements[t] = <span class="keyword">null</span>;</div><div class="line">    tail = t;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***下面依托pollX***</span></div><div class="line"></div><div class="line"><span class="comment">//出队</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> pollFirst();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    E x = pollFirst();</div><div class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    E x = pollLast();</div><div class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="get-amp-element-amp-peek"><a href="#get-amp-element-amp-peek" class="headerlink" title="get&amp;element&amp;peek"></a>get&amp;element&amp;peek</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取队首</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    E result = (E) elements[head];</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取队尾</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    E result = (E) elements[(tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)];</div><div class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="comment">//队首</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getFirst();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//***下面不抛异常***</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//空则返回null</span></div><div class="line">    <span class="keyword">return</span> (E) elements[head];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (E) elements[(tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//清空，不在队列范围内的都设为null</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = head;</div><div class="line">    <span class="keyword">int</span> t = tail;</div><div class="line">    <span class="keyword">if</span> (h != t) &#123; <span class="comment">// clear all cells</span></div><div class="line">        head = tail = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> i = h;</div><div class="line">        <span class="keyword">int</span> mask = elements.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            elements[i] = <span class="keyword">null</span>;</div><div class="line">            i = (i + <span class="number">1</span>) &amp; mask;</div><div class="line">        &#125; <span class="keyword">while</span> (i != t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//查看栈顶</div><div class="line">public E peek() &#123;</div><div class="line">    return peekFirst();</div><div class="line">&#125;</div><div class="line"></div><div class="line">//压入栈顶</div><div class="line">public void push(E e) &#123;</div><div class="line">    addFirst(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//弹出栈顶</div><div class="line">public E pop() &#123;</div><div class="line">    return removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#constfield&quot;&gt;const&amp;amp;field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#构造器和容量相关&quot;&gt;构造器和容量相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【源码】TreeSet</title>
    <link href="http://www.junqson.xin/2018/09/11/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91TreeSet/"/>
    <id>http://www.junqson.xin/2018/09/11/【源码】TreeSet/</id>
    <published>2018-09-11T11:57:40.000Z</published>
    <updated>2018-09-11T11:57:30.529Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#constfield">const&amp;field</a></li>
<li><a href="#constructor">constructor</a></li>
<li><a href="#addall">addAll</a></li>
<li><a href="#subsetheadsettailset">subSet、headSet、tailSet</a></li>
<li><a href="#导航索引方法">导航(索引)方法</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>TreeSet是个有序的Set，继承了 AbstractSet ，实现了NavigableSet, Cloneable, Serializable接口。</li>
<li>默认自然排序，也可指定Comparator。</li>
<li>提供了一系列导航方法，查找和指定目标的最匹配项。</li>
<li>add、remove、contains这些基础操作提供O(logn)的效率。</li>
<li>非同步，线程不安全。</li>
<li>size、isEmpty、contains、add、remove、clear都依托内部的NavigableMap<e,object>实例实现</e,object></li>
</ul>
<h3 id="const-amp-field"><a href="#const-amp-field" class="headerlink" title="const&amp;field"></a>const&amp;field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//依托内部的NavigableMap&lt;E,Object&gt;，实际上是TreeMap做内部容器</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</div><div class="line"></div><div class="line"><span class="comment">//填补Map中的value</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 默认构造</span></div><div class="line">TreeSet()</div><div class="line"></div><div class="line"><span class="comment">// 根据collection构造</span></div><div class="line">TreeSet(Collection&lt;? extends E&gt; collection)</div><div class="line"></div><div class="line"><span class="comment">// 指定Comparator的构造</span></div><div class="line">TreeSet(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</div><div class="line"></div><div class="line"><span class="comment">// 根据SortedSet构造</span></div><div class="line">TreeSet(SortedSet&lt;E&gt; set)</div><div class="line"></div><div class="line"><span class="comment">//根据NavigableMap&lt;E,Object&gt;构造</span></div><div class="line">TreeSet(NavigableMap&lt;E,Object&gt; m)</div></pre></td></tr></table></figure>
<h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//加入集合c中全部元素</span></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">// Use linear-time version if applicable</span></div><div class="line">    <span class="keyword">if</span> (m.size()==<span class="number">0</span> &amp;&amp; c.size() &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        c <span class="keyword">instanceof</span> SortedSet &amp;&amp;</div><div class="line">        m <span class="keyword">instanceof</span> TreeMap) &#123;</div><div class="line">        <span class="comment">//类型转换</span></div><div class="line">        SortedSet&lt;? extends E&gt; set = (SortedSet&lt;? extends E&gt;) c; </div><div class="line">        TreeMap&lt;E,Object&gt; map = (TreeMap&lt;E, Object&gt;) m;</div><div class="line">        Comparator&lt;? <span class="keyword">super</span> E&gt; cc = (Comparator&lt;? <span class="keyword">super</span> E&gt;) set.comparator();</div><div class="line">        Comparator&lt;? <span class="keyword">super</span> E&gt; mc = map.comparator();</div><div class="line">        </div><div class="line">        <span class="comment">//如果cc和mc两个Comparator相等</span></div><div class="line">        <span class="keyword">if</span> (cc==mc || (cc != <span class="keyword">null</span> &amp;&amp; cc.equals(mc))) &#123;</div><div class="line">        <span class="comment">//把Collection中所有元素添加成TreeMap集合的key</span></div><div class="line">            map.addAllForTreeSet(set, PRESENT);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="subSet、headSet、tailSet"><a href="#subSet、headSet、tailSet" class="headerlink" title="subSet、headSet、tailSet"></a>subSet、headSet、tailSet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//***通过TreeMap的subMap()实现,inclusive为是否包含边界***</span></div><div class="line"></div><div class="line"><span class="comment">// 返回子Set，从fromElement到toElement。</span></div><div class="line"><span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">subSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> fromInclusive,</span></span></div><div class="line"><span class="function"><span class="params">                              E toElement,   <span class="keyword">boolean</span> toInclusive)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.subMap(fromElement, fromInclusive,</div><div class="line">                                   toElement,   toInclusive));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//从头部到toElement，inclusive为是否包含toElement</span></div><div class="line"><span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">headSet</span><span class="params">(E toElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.headMap(toElement, inclusive));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//从fromElement到结尾。</span></div><div class="line"><span class="function"><span class="keyword">public</span> NavigableSet&lt;E&gt; <span class="title">tailSet</span><span class="params">(E fromElement, <span class="keyword">boolean</span> inclusive)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TreeSet&lt;E&gt;(m.tailMap(fromElement, inclusive));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="导航-索引-方法"><a href="#导航-索引-方法" class="headerlink" title="导航(索引)方法"></a>导航(索引)方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//小于e的最大元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">lower</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.lowerKey(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//小于/等于e的最大元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">floor</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.floorKey(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//大于/等于e的最小元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">ceiling</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.ceilingKey(e);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//中大于e的最小元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">higher</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.higherKey(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#constfield&quot;&gt;const&amp;amp;field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#constructor&quot;&gt;constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【源码】BitSet</title>
    <link href="http://www.junqson.xin/2018/09/09/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91BitSet/"/>
    <id>http://www.junqson.xin/2018/09/09/【源码】BitSet/</id>
    <published>2018-09-09T12:59:40.000Z</published>
    <updated>2018-09-09T13:00:04.933Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="constfield">const&amp;field</a></li>
<li><a href="#构造">构造</a></li>
<li><a href="valueof">valueOf</a></li>
<li><a href="#get">get</a></li>
<li><a href="#set">set</a></li>
<li><a href="#expandtoensurecapacity">expandTo&amp;ensureCapacity</a></li>
<li><a href="#flip">flip</a></li>
<li><a href="#nextSetBitnextClearBit">nextSetBit&amp;nextClearBit</a></li>
<li><a href="#andorxor">and&amp;or&amp;xor</a></li>
<li><a href="#长度和容量">长度和容量</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>可以看做操作位的Vector，容量可以动态变化。</li>
<li>实现了Cloneable和Serializable接口。</li>
<li>里面的位默认都是false。</li>
<li>一个BitSet可以通过逻辑AND、OR、XOR修改其他BitSet的内容</li>
<li>java.util下的，实际上不属于集合框架，但是和List比较像</li>
<li>线程不安全</li>
</ul>
<h3 id="const-amp-field"><a href="#const-amp-field" class="headerlink" title="const&amp;field"></a>const&amp;field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> ADDRESS_BITS_PER_WORD = <span class="number">6</span>;</div><div class="line"></div><div class="line"><span class="comment">// 每个word的bit数 = 2^6 = 64个位，对应8字节的long类型</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> BITS_PER_WORD = <span class="number">1</span> &lt;&lt;</div><div class="line">ADDRESS_BITS_PER_WORD;</div><div class="line"></div><div class="line"><span class="comment">// 掩码，BIT_PER_WORD - 1 每一个有效位都是1</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> BIT_INDEX_MASK = BITS_PER_WORD - <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">// long类型的掩码 16^16</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> WORD_MASK = <span class="number">0xffffffffffffffffL</span>;</div><div class="line"></div><div class="line"><span class="comment">// 内部存储"bit"的空间</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">long</span>[] words;</div><div class="line"></div><div class="line"><span class="comment">// word数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> wordsInUse = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// words的size是否由用户指定</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">boolean</span> sizeIsSticky = <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 默认</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">()</span> </span>&#123;</div><div class="line">    initWords(BITS_PER_WORD);</div><div class="line">    sizeIsSticky = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">// nbits为至少要存的位的个数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (nbits &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NegativeArraySizeException(<span class="string">"nbits &lt; 0: "</span> + nbits);</div><div class="line"></div><div class="line">    initWords(nbits);</div><div class="line">    sizeIsSticky = <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 给定内部的words数组，最后一个word不能是0</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">BitSet</span><span class="params">(<span class="keyword">long</span>[] words)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.words = words;</div><div class="line">    <span class="keyword">this</span>.wordsInUse = words.length;</div><div class="line">    checkInvariants();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>举例：</p>
<ul>
<li>1个long有 1 &lt;&lt; 6 个位</li>
<li>给定 nbits = 127，(127 - 1) &gt;&gt; 6 = 1，那么要填满1个long，2个long肯定没问题</li>
<li>给定 nbits = 129，(129 - 1) &gt;&gt; 6 = 2，至少要填满2个long，3个long肯定没问题 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 开辟一块内存至少要存下nbits个位</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWords</span><span class="params">(<span class="keyword">int</span> nbits)</span> </span>&#123;</div><div class="line">    words = <span class="keyword">new</span> <span class="keyword">long</span>[wordIndex(nbits-<span class="number">1</span>) + <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 计算需要填满几个long</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">wordIndex</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;  </div><div class="line">    <span class="keyword">return</span> bitIndex &gt;&gt; ADDRESS_BITS_PER_WORD;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 给定数据，构造返回一个BitSet</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BitSet <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span>[] longs)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BitSet <span class="title">valueOf</span><span class="params">(LongBuffer lb)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BitSet <span class="title">valueOf</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BitSet <span class="title">valueOf</span><span class="params">(ByteBuffer bb)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</div><div class="line">    checkInvariants();</div><div class="line">    <span class="comment">// 定位</span></div><div class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</div><div class="line">    <span class="comment">// 使用与操作判断</span></div><div class="line">    <span class="keyword">return</span> (wordIndex &lt; wordsInUse)</div><div class="line">        &amp;&amp; ((words[wordIndex] &amp; (<span class="number">1L</span> &lt;&lt; bitIndex)) != <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set用于设置给定位置的位，默认设置为true，也可以指定。<br>支持范围fromIndex到toIndex。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</div><div class="line">    <span class="comment">// 定位到long[]中的位置</span></div><div class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</div><div class="line">    <span class="comment">// 扩容操作</span></div><div class="line">    expandTo(wordIndex);</div><div class="line">    <span class="comment">// 不管是不是1，结果都是1</span></div><div class="line">    words[wordIndex] |= (<span class="number">1L</span> &lt;&lt; bitIndex); </div><div class="line">    checkInvariants();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> bitIndex, <span class="keyword">boolean</span> value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value)</div><div class="line">        set(bitIndex);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">// 设为0</span></div><div class="line">        clear(bitIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 范围操作</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    checkRange(fromIndex, toIndex);</div><div class="line">    <span class="comment">// 直接退出</span></div><div class="line">    <span class="keyword">if</span> (fromIndex == toIndex)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">    <span class="comment">// 定位</span></div><div class="line">    <span class="keyword">int</span> startWordIndex = wordIndex(fromIndex);</div><div class="line">    <span class="keyword">int</span> endWordIndex   = wordIndex(toIndex - <span class="number">1</span>);</div><div class="line">    <span class="comment">// 保证容量</span></div><div class="line">    expandTo(endWordIndex);</div><div class="line">    <span class="comment">// 计算掩码</span></div><div class="line">    <span class="keyword">long</span> firstWordMask = WORD_MASK &lt;&lt; fromIndex;</div><div class="line">    <span class="keyword">long</span> lastWordMask  = WORD_MASK &gt;&gt;&gt; -toIndex;</div><div class="line">    <span class="comment">// 都在同一个word范围内</span></div><div class="line">    <span class="keyword">if</span> (startWordIndex == endWordIndex) &#123;</div><div class="line">        <span class="comment">// 两个掩码与运算，然后或运算</span></div><div class="line">        words[startWordIndex] |= (firstWordMask &amp; lastWordMask);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 否则 两端对掩码进行或操作，中间置为1</span></div><div class="line">        </div><div class="line">        <span class="comment">// 开始</span></div><div class="line">        words[startWordIndex] |= firstWordMask;</div><div class="line"></div><div class="line">        <span class="comment">// 中间全设为1</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startWordIndex+<span class="number">1</span>; i &lt; endWordIndex; i++)</div><div class="line">            words[i] = WORD_MASK;</div><div class="line">        </div><div class="line">        <span class="comment">// 结束</span></div><div class="line">        words[endWordIndex] |= lastWordMask;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    checkInvariants();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="expandTo-amp-ensureCapacity"><a href="#expandTo-amp-ensureCapacity" class="headerlink" title="expandTo&amp;ensureCapacity"></a>expandTo&amp;ensureCapacity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 扩容</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expandTo</span><span class="params">(<span class="keyword">int</span> wordIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> wordsRequired = wordIndex+<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (wordsInUse &lt; wordsRequired) &#123;</div><div class="line">        ensureCapacity(wordsRequired);</div><div class="line">        wordsInUse = wordsRequired;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 保证空间够用</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> wordsRequired)</span> </span>&#123;</div><div class="line">    <span class="comment">// 小于实际所需</span></div><div class="line">    <span class="keyword">if</span> (words.length &lt; wordsRequired) &#123;</div><div class="line">        <span class="comment">// 2倍扩容或扩容到实际长度，两者取其大</span></div><div class="line">        <span class="keyword">int</span> request = Math.max(<span class="number">2</span> * words.length, wordsRequired);</div><div class="line">        words = Arrays.copyOf(words, request);</div><div class="line">        sizeIsSticky = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h3><p>反转该位，1设为0，0设为1，借用xor运算</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> bitIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (bitIndex &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"bitIndex &lt; 0: "</span> + bitIndex);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> wordIndex = wordIndex(bitIndex);</div><div class="line">    expandTo(wordIndex);</div><div class="line">    </div><div class="line">    words[wordIndex] ^= (<span class="number">1L</span> &lt;&lt; bitIndex);</div><div class="line"></div><div class="line">    recalculateWordsInUse();</div><div class="line">    checkInvariants();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="nextSetBit-amp-nextClearBit"><a href="#nextSetBit-amp-nextClearBit" class="headerlink" title="nextSetBit&amp;nextClearBit"></a>nextSetBit&amp;nextClearBit</h3><p>这两个方法分别用于找给定索引位置之后的下一个1(Set)或者0(Clear), 这里只贴一个nextSetBit</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextSetBit</span><span class="params">(<span class="keyword">int</span> fromIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex &lt; 0: "</span> + fromIndex);</div><div class="line"></div><div class="line">    checkInvariants();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> u = wordIndex(fromIndex);</div><div class="line">    <span class="comment">// 超出范围肯定没有了</span></div><div class="line">    <span class="keyword">if</span> (u &gt;= wordsInUse)</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> word = words[u] &amp; (WORD_MASK &lt;&lt; fromIndex);</div><div class="line">    <span class="comment">// 依次寻找</span></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (word != <span class="number">0</span>)</div><div class="line">            <span class="comment">//带上前面的</span></div><div class="line">            <span class="keyword">return</span> (u * BITS_PER_WORD) + Long.numberOfTrailingZeros(word);</div><div class="line">        <span class="keyword">if</span> (++u == wordsInUse)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        word = words[u];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="and-amp-or-amp-xor"><a href="#and-amp-or-amp-xor" class="headerlink" title="and&amp;or&amp;xor"></a>and&amp;or&amp;xor</h3><p>and、or、xor的实现类似，只贴一个and。操作的结果放在本对象里。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">and</span><span class="params">(BitSet set)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == set)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 多出来的都设成0</span></div><div class="line">    <span class="keyword">while</span> (wordsInUse &gt; set.wordsInUse)</div><div class="line">        words[--wordsInUse] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 依次and操作</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInUse; i++)</div><div class="line">        words[i] &amp;= set.words[i];</div><div class="line">    </div><div class="line">    <span class="comment">// 重新计算wordsInUse</span></div><div class="line">    recalculateWordsInUse();</div><div class="line">    checkInvariants();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="长度和容量"><a href="#长度和容量" class="headerlink" title="长度和容量"></a>长度和容量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 所以说这里返回的所占的空间能存储的bit位数，BITS_PER_WORD的倍数</span></div><div class="line">    <span class="keyword">return</span> words.length * BITS_PER_WORD;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (wordsInUse == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="comment">// 返回实际有效的，减去后面的0位</span></div><div class="line">    <span class="keyword">return</span> BITS_PER_WORD * (wordsInUse - <span class="number">1</span>) +</div><div class="line">        (BITS_PER_WORD - Long.numberOfLeadingZeros(words[wordsInUse - <span class="number">1</span>]));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 返回1的个数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">cardinality</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; wordsInUse; i++)</div><div class="line">        sum += Long.bitCount(words[i]);</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;constfield&quot;&gt;const&amp;amp;field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#构造&quot;&gt;构造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;valueof&quot;&gt;val
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【源码】EnumMap</title>
    <link href="http://www.junqson.xin/2018/09/08/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91EnumMap/"/>
    <id>http://www.junqson.xin/2018/09/08/【源码】EnumMap/</id>
    <published>2018-09-08T11:25:40.000Z</published>
    <updated>2018-09-08T11:25:58.918Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#常量变量">常量&amp;变量</a></li>
<li><a href="#构造">构造</a></li>
<li><a href="#get">get</a></li>
<li><a href="#put">put</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>继承AbstractMap，实现了Serializable和Cloneable，为Enum类型打造的Map实现。</li>
<li>非线程安全</li>
<li>内部元素的顺序为自然顺序，也就是被声明的顺序。</li>
<li>key必须是Enum，不能为null，但value可以是null</li>
</ul>
<h3 id="常量-amp-变量"><a href="#常量-amp-变量" class="headerlink" title="常量&amp;变量"></a>常量&amp;变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 类型为Enum的key的Class对象</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Class&lt;K&gt; keyType;</div><div class="line"></div><div class="line"><span class="comment">// 缓存该Enum中所有的成员</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> K[] keyUniverse;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Array representation of this map.  The ith element is the value</span></div><div class="line"><span class="comment"> * to which universe[i] is currently mapped, or null if it isn't</span></div><div class="line"><span class="comment"> * mapped to anything, or NULL if it's mapped to null.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="comment">// 代表这个map的数组。null代表什么也不映射，NULL代表映射null</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] vals;</div><div class="line"></div><div class="line"><span class="comment">// 代表null的匿名类</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object NULL = <span class="keyword">new</span> Object() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"java.util.EnumMap.NULL"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// map中映射数</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 一个entryset，第一次请求的时候才会初始化</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div></pre></td></tr></table></figure>
<h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 传入目标类型的class对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">EnumMap</span><span class="params">(Class&lt;K&gt; keyType)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.keyType = keyType;</div><div class="line">    keyUniverse = getKeyUniverse(keyType);</div><div class="line">    <span class="comment">// 这里可以看到，vals数组的长度就是enum中成员的个数</span></div><div class="line">    vals = <span class="keyword">new</span> Object[keyUniverse.length];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 传入一个EnumMap，和原来的一样</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">EnumMap</span><span class="params">(EnumMap&lt;K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        keyType = m.keyType;</div><div class="line">        keyUniverse = m.keyUniverse;</div><div class="line">        vals = m.vals.clone();</div><div class="line">        size = m.size;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 传入Map</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">EnumMap</span><span class="params">(Map&lt;K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (m <span class="keyword">instanceof</span> EnumMap) &#123;</div><div class="line">        <span class="comment">// 按照上面的方法实现</span></div><div class="line">        EnumMap&lt;K, ? extends V&gt; em = (EnumMap&lt;K, ? extends V&gt;) m;</div><div class="line">        keyType = em.keyType;</div><div class="line">        keyUniverse = em.keyUniverse;</div><div class="line">        vals = em.vals.clone();</div><div class="line">        size = em.size;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (m.isEmpty())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Specified map is empty"</span>);</div><div class="line">        <span class="comment">// 取出一个key获得他的类型</span></div><div class="line">        keyType = m.keySet().iterator().next().getDeclaringClass();</div><div class="line">        keyUniverse = getKeyUniverse(keyType);</div><div class="line">        vals = <span class="keyword">new</span> Object[keyUniverse.length];</div><div class="line">        <span class="comment">// 全部放入</span></div><div class="line">        putAll(m);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 检验key的合法性，然后unmaskNull后返回</span></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (isValidKey(key) ?</div><div class="line">            unmaskNull(vals[((Enum&lt;?&gt;)key).ordinal()]) : <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValidKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 比instanceof Enum效率高</span></div><div class="line">    Class&lt;?&gt; keyClass = key.getClass();</div><div class="line">    <span class="keyword">return</span> keyClass == keyType || keyClass.getSuperclass() == keyType;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> V <span class="title">unmaskNull</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="comment">// 如果返回是NULL，转成null</span></div><div class="line">    <span class="keyword">return</span> (V)(value == NULL ? <span class="keyword">null</span> : value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    typeCheck(key);</div><div class="line">    <span class="comment">// 获取声明顺序，放入vals对应位置</span></div><div class="line">    <span class="keyword">int</span> index = key.ordinal();</div><div class="line">    Object oldValue = vals[index];</div><div class="line">    <span class="comment">// 如果是null，映射为NULL对象</span></div><div class="line">    vals[index] = maskNull(value)</div><div class="line">    ;</div><div class="line">    <span class="comment">// 如果是新增的映射，size++</span></div><div class="line">    <span class="keyword">if</span> (oldValue == <span class="keyword">null</span>)</div><div class="line">        size++;</div><div class="line">    <span class="keyword">return</span> unmaskNull(oldValue);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 检出非法的类型</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">typeCheck</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">    Class&lt;?&gt; keyClass = key.getClass();</div><div class="line">    <span class="keyword">if</span> (keyClass != keyType &amp;&amp; keyClass.getSuperclass() != keyType)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(keyClass + <span class="string">" != "</span> + keyType);</div><div class="line">&#125;</div><div class="line"><span class="comment">//  转化null为NULL</span></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">maskNull</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (value == <span class="keyword">null</span> ? NULL : value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常量变量&quot;&gt;常量&amp;amp;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#构造&quot;&gt;构造&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#get&quot;&gt;get&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【源码】ArrayList</title>
    <link href="http://www.junqson.xin/2018/08/20/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91ArrayList/"/>
    <id>http://www.junqson.xin/2018/08/20/【源码】ArrayList/</id>
    <published>2018-08-20T12:28:40.000Z</published>
    <updated>2018-08-20T12:29:17.258Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#constfield">const&amp;field</a></li>
<li><a href="#构造方法">构造方法</a></li>
<li><a href="#容量相关">容量相关</a></li>
<li><a href="#添加">添加</a></li>
<li><a href="#删除">删除</a></li>
<li><a href="#查找">查找</a></li>
<li><a href="#修改">修改</a></li>
<li><a href="#其他">其他</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li><p>ArrayList非线程安全。</p>
</li>
<li><p>ArrayList基于动态数组，是一种线性表。随机访问友好，插入和删除效率低。</p>
</li>
<li><p>容量动态调节，有一套扩容和优化空间的机制</p>
</li>
<li><p>ArrayList继承了AbstractList，实现了List、RandomAccess、Cloneable、Serializable接口。</p>
</li>
<li>Based on Jdk8</li>
</ul>
<h3 id="const-amp-field"><a href="#const-amp-field" class="headerlink" title="const&amp;field"></a>const&amp;field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//元素个数，并不一定是容量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"><span class="comment">//默认初始容量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="comment">//指定初始容量为0时，返回该空数组</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//不指定初始容量时，返回该空数组。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">存储元素，ArrayList的容量就是这个缓冲区的容量。</span></div><div class="line"><span class="comment">当elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA时，</span></div><div class="line"><span class="comment">第一次添加元素后，扩容至默认容量10。非私有域便于嵌套类的访问。</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">另外虽然这里用了transient修饰，但是其实现了readObject和writeObject</span></div><div class="line"><span class="comment">  for (int i = 0; i &lt; size; i++)  </span></div><div class="line"><span class="comment">            s.writeObject(elementData[i]); </span></div><div class="line"><span class="comment">查看源码可知,实现了序列化</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="keyword">transient</span> Object[] elementData; </div><div class="line"></div><div class="line"><span class="comment">//最大容量，避免在某些虚拟机下可能引起的OutOfMemoryError，减8的原因：数组作为一个对象，需要一定的内存存储对象头信息，对象头信息最大占用内存不可超过8字节。</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="comment">//序列化的VersionUID</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</div></pre></td></tr></table></figure>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//默认构造个空list</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//根据给定的初始容量构造</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                           initialCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//构造一个包含特定元素的list,用iterator依次取出collection中的元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    elementData = c.toArray();</div><div class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//这里有个bug，c.toArray()可能不会返回Object[] </span></div><div class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// replace with empty array.</span></div><div class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="容量相关"><a href="#容量相关" class="headerlink" title="容量相关"></a>容量相关</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给用户使用，确保容量，指定的容量要大于默认容量</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class="line">            ? <span class="number">0</span></div><div class="line">            : DEFAULT_CAPACITY;</div><div class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给类内部使用，确保容量,用于内部优化,保证空间资源不被浪费, 主要用于add()方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">        minCapacity= Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">    &#125;</div><div class="line">    ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//实际确保容量的方法</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">//用于fail-fast机制，用于在并发场景下</span></div><div class="line">    modCount++;</div><div class="line">    <span class="comment">// 防溢出</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//私有扩容方法，确保minCapacity</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="comment">// 扩充当前容量的1.5倍</span></div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">    <span class="comment">// 若 newCapacity 依旧小于 minCapacity</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)  </div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="comment">// 若 newCapacity大于最大存储容量，分配为最大容量</span></div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)   </div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    <span class="comment">//</span></div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//私有大容量分配，最大分配Integer.MAX_VALUE,最小分配MAX_ARRAY_SIZE</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// 溢出</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">            Integer.MAX_VALUE :</div><div class="line">            MAX_ARRAY_SIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//加到最后。O(1)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    elementData[size++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//加到指定位置，后面依次后移。O(n)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    rangeCheckForAdd(index);  <span class="comment">//检查index</span></div><div class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                     size - index);</div><div class="line">    elementData[index] = element;</div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"><span class="comment">//将集合的所有元素添加到末尾</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="comment">//要添加元素的个数</span></div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    ensureCapacityInternal(size + numNew);  </div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</div><div class="line">    size += numNew;</div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//指定位置插入集合元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    rangeCheckForAdd(index);</div><div class="line"></div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="keyword">int</span> numNew = a.length;  </div><div class="line">    ensureCapacityInternal(size + numNew);</div><div class="line">    <span class="keyword">int</span> numMoved = size - index;<span class="comment">//list中要移动的数量</span></div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index, elementData, index + numNew,</div><div class="line">                numMoved);</div><div class="line"></div><div class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</div><div class="line">    size += numNew;</div><div class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//前者不检查负值，让jvm抛出ArrayIndexOfBound</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt;= size)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除指定位置元素并返回 O(n)</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line">    modCount++;</div><div class="line">    E oldValue = elementData(index);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                         numMoved);</div><div class="line">    <span class="comment">//让gc进行回收</span></div><div class="line">    elementData[--size] = <span class="keyword">null</span>; </div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除给定obj</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                fastRemove(index);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                fastRemove(index);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//私有删除方法，不进行边界检查，不返回被删除元素</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">        <span class="comment">//native方法，速度比for和clone都"fast"</span></div><div class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                         numMoved);</div><div class="line">    elementData[--size] = <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//删除[fromIndex,toIndex)的元素</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">int</span> numMoved = size - toIndex;<span class="comment">//要移动的数量</span></div><div class="line">    System.arraycopy(elementData, toIndex, elementData, fromIndex,</div><div class="line">            numMoved);</div><div class="line"></div><div class="line">    <span class="comment">// 删除后，list 的长度</span></div><div class="line">    <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</div><div class="line">    <span class="comment">//将失效元素置空</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</div><div class="line">        elementData[i] = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    size = newSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//移除c集合中的元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">    <span class="comment">//判断集合是否为空，否则抛出NPE</span></div><div class="line">    Objects.requireNonNull(c);</div><div class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//保留c集合中的元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">    Objects.requireNonNull(c);</div><div class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">批量移除。O(n)</span></div><div class="line"><span class="comment">第二个参数，如果为true只保留c集合中元素，如果false，移除c集合中的元素</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</div><div class="line">    <span class="comment">//两个指针，r是读取位置，w是写入位置</span></div><div class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</div><div class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//遍历数组，修改元素，这里使用for循环，效率要低于fastremove</span></div><div class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</div><div class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</div><div class="line">                elementData[w++] = elementData[r];</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;，</div><div class="line">        <span class="comment">//此时可能出错，将r之后的拷贝到w之后</span></div><div class="line">        <span class="keyword">if</span> (r != size) &#123;</div><div class="line">            System.arraycopy(elementData, r,</div><div class="line">                    elementData, w,</div><div class="line">                    size - r);</div><div class="line">            w += size - r;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (w != size) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</div><div class="line">                elementData[i] = <span class="keyword">null</span>;</div><div class="line">            modCount += size - w;</div><div class="line">            size = w;</div><div class="line">            modified = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//为false则w == size，说明并没有删除</span></div><div class="line">    <span class="keyword">return</span> modified;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//清空list，不释放空间 O(n)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="comment">//交给gc吧23333</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">        elementData[i] = <span class="keyword">null</span>;</div><div class="line">    size = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取指定位置元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> elementData(index);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> </div><div class="line"><span class="comment">//顺序找，返回首先出现的位置，找不到返-1。O(n)</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//逆序找，返回最后出现的位置，找不到返-1。O(n)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//顺序找实现，根据返回值判断</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//修改指定位置元素</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    rangeCheck(index);</div><div class="line">    E oldValue = elementData(index);</div><div class="line">    elementData[index] = element;</div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">取子list,返回Sublist这个ArrayList的内部类,</span></div><div class="line"><span class="comment">这是个坑，注意SubList和其他List实现类的区别</span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//传入Compartor，用Arrays.sort()实现，主要是LegacyMergeSort和Timsort</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">    Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</div><div class="line">    <span class="comment">//并发环境下有可能抛出</span></div><div class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">    modCount++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//判空，直接看size就行了</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> size == <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//克隆，主要拷贝elementData数组</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</div><div class="line">        v.elementData = Arrays.copyOf(elementData, size);</div><div class="line">        v.modCount = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> v;</div><div class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">        <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//拷贝到新数组中，释放多余空间</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">        elementData = (size == <span class="number">0</span>)</div><div class="line">          ? EMPTY_ELEMENTDATA</div><div class="line">          : Arrays.copyOf(elementData, size);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#constfield&quot;&gt;const&amp;amp;field&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#构造方法&quot;&gt;构造方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#容量相关&quot;&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【源码】Arrays</title>
    <link href="http://www.junqson.xin/2018/08/16/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91Arrays/"/>
    <id>http://www.junqson.xin/2018/08/16/【源码】Arrays/</id>
    <published>2018-08-16T15:49:40.000Z</published>
    <updated>2018-08-16T11:45:00.955Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#常量">常量</a></li>
<li><a href="#rangeCheck">rangeCheck</a></li>
<li><a href="#sort">sort</a></li>
<li><a href="#parallelSort">parallelSort</a></li>
<li><a href="#equals&amp;deepEquals">equals&amp;deepEquals</a></li>
<li><a href="#fill">fill</a></li>
<li><a href="#asList">asList</a></li>
<li><a href="#binarySearch">binarySearch</a></li>
<li><a href="#copyOf">copyOf</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>java.util中的工具类，提供数组相关的常用操作，排序、比较、填充、二分查找等功能</p>
<p>based on jdk8</p>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//小于等于这个值时，就使用插入排序。将被废弃</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INSERTIONSORT_THRESHOLD = <span class="number">7</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">并行排序的最小数组长度，数组长度小于这个数则不在划分数组</span></div><div class="line"><span class="comment">数组长度较小会导致排序的任务竞争内存导致效率降低</span></div><div class="line"><span class="comment">*/</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_ARRAY_SORT_GRAN = <span class="number">1</span> &lt;&lt; <span class="number">13</span>;</div></pre></td></tr></table></figure>
<h3 id="rangeCheck"><a href="#rangeCheck" class="headerlink" title="rangeCheck"></a>rangeCheck</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//私有方法，检查是否越界</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> arrayLength, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (fromIndex &gt; toIndex) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                <span class="string">"fromIndex("</span> + fromIndex + <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(fromIndex);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (toIndex &gt; arrayLength) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(toIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>对于int[]、byte[]、long[]等基本类型数组的排序，使用DualPivotQuicksort类进行排序，可选范围。</p>
<p>注意这个类对改动了双轴快排的策略，使用了其他的排序方法,查看其源码可以知道还使用了计数排序、插入排序、归并排序。很多会导致其他版本快排退化到O(n^2)的数据集使用这个类仍能保证O(nlogn)</p>
<p><a href="https://blog.csdn.net/Holmofy/article/details/71168530" target="_blank" rel="external">单轴快排和双轴快排</a></p>
<ul>
<li>快排的思想是分治，方法是递归</li>
<li>单轴快排只有一个划分点，对点两侧的区间进行递归</li>
<li>双轴快排有两个划分点，将区间分为三段，效率会高一些</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">    DualPivotQuicksort.sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    rangeCheck(a.length, fromIndex, toIndex);</div><div class="line">    DualPivotQuicksort.sort(a, fromIndex, toIndex - <span class="number">1</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对Object[]、T[]的排序，主要就是legacyMergeSort()这个旧版归并排序和Timsort.sort()这个进行了很多优化的归并排序。也提供范围排序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Object[] a)</span> </span>&#123;</div><div class="line">    <span class="comment">//为了兼容性，允许通过系统属性的方式使用旧版归并实现，不过将要废弃了</span></div><div class="line">    <span class="keyword">if</span> (LegacyMergeSort.userRequested)</div><div class="line">        legacyMergeSort(a);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        ComparableTimSort.sort(a, <span class="number">0</span>, a.length, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">        sort(a);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (LegacyMergeSort.userRequested)</div><div class="line">            legacyMergeSort(a, c);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="parallelSort"><a href="#parallelSort" class="headerlink" title="parallelSort"></a>parallelSort</h3><p>对基本类型的并行排序，以int[]为例。提供范围排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">这个排序算法是个将数组划分为几个子数组分别排序然后合并的并行排序-合并过程。</span></div><div class="line"><span class="comment">当子数组长度达到最小粒度，或者数组小于设定的最小粒度，</span></div><div class="line"><span class="comment">使用类似Arrays.sort()的方法(DualPivotQuickSort)来进行排序。</span></div><div class="line"><span class="comment">这个算法需要一个不大于原数组大小的额外空间，使用ForkJoin common pool</span></div><div class="line"><span class="comment">ForkJoinPool#commonPool()）来执行并行的排序任务。</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parallelSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = a.length, p, g;</div><div class="line">    <span class="comment">//如果数组长度小于分组的最小粒度或者只有一个执行线程，使用DualPivotQuicksort</span></div><div class="line">    <span class="keyword">if</span> (n &lt;= MIN_ARRAY_SORT_GRAN ||</div><div class="line">        (p = ForkJoinPool.getCommonPoolParallelism()) == <span class="number">1</span>)</div><div class="line">        DualPivotQuicksort.sort(a, <span class="number">0</span>, n - <span class="number">1</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">//g表示粒度，参数4、5、6分别为排序数组开始位置，需要排序的长度和额外空间的开始位置</span></div><div class="line">        <span class="comment">//g = n / (p &lt;&lt; 2)不可小于最小粒度,否则使用最小粒度</span></div><div class="line">        <span class="keyword">new</span> ArraysParallelSortHelpers.FJInt.Sorter</div><div class="line">            (<span class="keyword">null</span>, a, <span class="keyword">new</span> <span class="keyword">int</span>[n], <span class="number">0</span>, n, <span class="number">0</span>,</div><div class="line">             ((g = n / (p &lt;&lt; <span class="number">2</span>)) &lt;= MIN_ARRAY_SORT_GRAN) ?</div><div class="line">             MIN_ARRAY_SORT_GRAN : g).invoke();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parallelSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    rangeCheck(a.length, fromIndex, toIndex);</div><div class="line">    <span class="keyword">int</span> n = toIndex - fromIndex, p, g;</div><div class="line">    <span class="keyword">if</span> (n &lt;= MIN_ARRAY_SORT_GRAN ||</div><div class="line">        (p = ForkJoinPool.getCommonPoolParallelism()) == <span class="number">1</span>)</div><div class="line">        DualPivotQuicksort.sort(a, fromIndex, toIndex - <span class="number">1</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">new</span> ArraysParallelSortHelpers.FJInt.Sorter</div><div class="line">            (<span class="keyword">null</span>, a, <span class="keyword">new</span> <span class="keyword">int</span>[n], fromIndex, n, <span class="number">0</span>,</div><div class="line">             ((g = n / (p &lt;&lt; <span class="number">2</span>)) &lt;= MIN_ARRAY_SORT_GRAN) ?</div><div class="line">             MIN_ARRAY_SORT_GRAN : g).invoke();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对Object[]、T[]的排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">parallelSort</span><span class="params">(T[] a)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = a.length, p, g;</div><div class="line">    <span class="keyword">if</span> (n &lt;= MIN_ARRAY_SORT_GRAN ||</div><div class="line">        (p = ForkJoinPool.getCommonPoolParallelism()) == <span class="number">1</span>)</div><div class="line">        <span class="comment">//与基本类型不同，这里使用TimSort</span></div><div class="line">        TimSort.sort(a, <span class="number">0</span>, n, NaturalOrder.INSTANCE, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="comment">//不提供Comparator时，使用Arrays.NaturalOrder自然顺序的Comparator</span></div><div class="line">        <span class="keyword">new</span> ArraysParallelSortHelpers.FJObject.Sorter&lt;T&gt;</div><div class="line">        (<span class="keyword">null</span>, a,</div><div class="line">         (T[])Array.newInstance(a.getClass().getComponentType(), n),</div><div class="line">         <span class="number">0</span>, n, <span class="number">0</span>, ((g = n / (p &lt;&lt; <span class="number">2</span>)) &lt;= MIN_ARRAY_SORT_GRAN) ?</div><div class="line">         MIN_ARRAY_SORT_GRAN : g, NaturalOrder.INSTANCE).invoke();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="equals-amp-deepEquals"><a href="#equals-amp-deepEquals" class="headerlink" title="equals&amp;deepEquals"></a>equals&amp;deepEquals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] a2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a==a2)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="comment">//存在null，则false</span></div><div class="line">    <span class="keyword">if</span> (a==<span class="keyword">null</span> || a2==<span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> length = a.length;</div><div class="line">    <span class="keyword">if</span> (a2.length != length)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="comment">//依次比较</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)</div><div class="line">        <span class="keyword">if</span> (a[i] != a2[i])</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Object[]的比较   </span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++) &#123;</div><div class="line">Object o1 = a[i];</div><div class="line">Object o2 = a2[i];</div><div class="line"><span class="keyword">if</span> (!(o1==<span class="keyword">null</span> ? o2==<span class="keyword">null</span> : o1.equals(o2)))</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//深入比较，即比较多维数组。deepHashcode和deepToString也是如此。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deepEquals</span><span class="params">(Object[] a1, Object[] a2)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a1 == a2)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (a1 == <span class="keyword">null</span> || a2==<span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">int</span> length = a1.length;</div><div class="line"></div><div class="line">    <span class="comment">//长度不同直接false</span></div><div class="line">    <span class="keyword">if</span> (a2.length != length)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">        Object e1 = a1[i];</div><div class="line">        Object e2 = a2[i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (e1 == e2)</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">if</span> (e1 == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">//递归比较，记录是否相等</span></div><div class="line">        <span class="keyword">boolean</span> eq = deepEquals0(e1, e2);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!eq)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>用给定的值填充数组，提供范围操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = a.length; i &lt; len; i++)</div><div class="line">        a[i] = val;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于Object[]的填充，只是填充了同一引用，并未克隆对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">(Object[] a, Object val)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = a.length; i &lt; len; i++)</div><div class="line">        a[i] = val;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="asList"><a href="#asList" class="headerlink" title="asList"></a>asList</h3><p>返回固定大小的ArrayList这个Arrays内部类，注意在使用时和java.util.ArrayList的区别。这个方法和Collection.toArray方法充当了数组和集合的桥梁<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SafeVarargs</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"varargs"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch"></a>binarySearch</h3><p>二分查找，显然数组必须是有序的，否则结果不确定了。如果数组里面有多个相同的，不能保证找到哪一个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用私有方法</span></div><div class="line">    <span class="keyword">return</span> binarySearch0(a, <span class="number">0</span>, a.length, key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch0</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex,</span></span></div><div class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> low = fromIndex;</div><div class="line">    <span class="keyword">int</span> high = toIndex - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> midVal = a[mid];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (midVal &lt; key)</div><div class="line">            low = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key)</div><div class="line">            high = mid - <span class="number">1</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> mid; <span class="comment">// 找到了</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -(low + <span class="number">1</span>);  <span class="comment">// 没找着，保证为负</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="copyOf"><a href="#copyOf" class="headerlink" title="copyOf"></a>copyOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出数组新长度，拷贝到新数组中，使用System.arrayCopy实现，newLenght &gt;= oldLength</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">short</span>[] copyOf(<span class="keyword">short</span>[] original, <span class="keyword">int</span> newLength) &#123;</div><div class="line">    <span class="keyword">short</span>[] copy = <span class="keyword">new</span> <span class="keyword">short</span>[newLength];</div><div class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</div><div class="line">                     Math.min(original.length, newLength));</div><div class="line">    <span class="keyword">return</span> copy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常量&quot;&gt;常量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rangeCheck&quot;&gt;rangeCheck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sort&quot;&gt;sort&lt;/a&gt;&lt;
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【源码】Properties</title>
    <link href="http://www.junqson.xin/2018/08/16/%E3%80%90%E6%BA%90%E7%A0%81%E3%80%91Properties/"/>
    <id>http://www.junqson.xin/2018/08/16/【源码】Properties/</id>
    <published>2018-08-16T15:49:40.000Z</published>
    <updated>2018-09-10T10:56:13.987Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><a href="#介绍">介绍</a></li>
<li><a href="#常量变量">常量&amp;变量</a></li>
<li><a href="#load">load</a></li>
<li><a href="#store">store</a></li>
<li><a href="#getproperty">getProperty</a></li>
<li><a href="#setproperty">setProperty</a></li>
<li><a href="#list">list</a></li>
</ul>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Properties类抽象了一个持久的属性集，可以被存储到一个流中或从一个流中加载。Properties里面的key和value都是String类型。Properites继承自HashTable，但是要避免使用put和putAll方法，防止放入非String类型的数据，应该使用setProperty方法</p>
<p>一个属性集可以包含另一个属性集作为他的默认属性，当一个属性键在原始的Properties中找不着时，才会搜索这个默认属性集。</p>
<p>Properties还支持对xml的读取和存储。</p>
<h3 id="常量-amp-变量"><a href="#常量-amp-变量" class="headerlink" title="常量&amp;变量"></a>常量&amp;变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 默认属性集</span></div><div class="line"><span class="keyword">protected</span> Properties defaults;</div><div class="line"></div><div class="line"><span class="comment">//十六进制数常量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] hexDigit = &#123;</div><div class="line">    <span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//将流封装成Properties.LineReader，然后用load0读取properties，LineReader是面向行读取的Reder</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Reader reader)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    load0(<span class="keyword">new</span> LineReader(reader));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(InputStream inStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    load0(<span class="keyword">new</span> LineReader(inStream));</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">行分为自然行和逻辑行。自然行被定义为以("\n","\r","\r\n"，eof)任一结尾的字符行。</span></div><div class="line"><span class="comment">自然行也可以是空行，注释行(#,!作为第一个非空白字符的行)，或者保存了全部或部分键-元素对的字符行。</span></div><div class="line"><span class="comment">逻辑行保存了所有键-元素对的数据，可能分散在多个相邻的自然行中，用反斜杠字符 \ 转义行结束符序列。</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">key和value中间的分隔符可以是":"、"="，" "，分隔符左右两侧的空格会被删掉，key前的空格也会被去掉</span></div><div class="line"><span class="comment">*/</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">load0</span><span class="params">(LineReader lr)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">char</span>[] convtBuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> limit;  <span class="comment">// 字符总数</span></div><div class="line">    <span class="keyword">int</span> keyLen; <span class="comment">// key的长度</span></div><div class="line">    <span class="keyword">int</span> valueStart; <span class="comment">// value的起始位置</span></div><div class="line">    <span class="keyword">char</span> c;</div><div class="line">    <span class="keyword">boolean</span> hasSep;</div><div class="line">    <span class="keyword">boolean</span> precedingBackslash; <span class="comment">// 是否是转义字符</span></div><div class="line"></div><div class="line">    <span class="keyword">while</span> ((limit = lr.readLine()) &gt;= <span class="number">0</span>) &#123;</div><div class="line">        c = <span class="number">0</span>;</div><div class="line">        keyLen = <span class="number">0</span>;</div><div class="line">        <span class="comment">// value的起始位置默认为limit</span></div><div class="line">        valueStart = limit;</div><div class="line">        hasSep = <span class="keyword">false</span>;</div><div class="line">        precedingBackslash = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">// keyLen &lt; limit</span></div><div class="line">        <span class="keyword">while</span> (keyLen &lt; limit) &#123;</div><div class="line">            c = lr.lineBuf[keyLen];</div><div class="line">            <span class="comment">// 检测到非空格分隔符且前面的字符没有转义</span></div><div class="line">            <span class="keyword">if</span> ((c == <span class="string">'='</span> || c == <span class="string">':'</span>) &amp;&amp; !precedingBackslash) &#123;</div><div class="line">                <span class="comment">//下一个就是value开始的位置</span></div><div class="line">                valueStart = keyLen + <span class="number">1</span>;</div><div class="line">                <span class="comment">// 并且指定，去除空格</span></div><div class="line">                hasSep = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((c == <span class="string">' '</span> || c == <span class="string">'\t'</span> || c == <span class="string">'\f'</span>) &amp;&amp; !precedingBackslash) &#123;</div><div class="line">                <span class="comment">// 检测到空格分隔符</span></div><div class="line">                valueStart = keyLen + <span class="number">1</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 检测到'\'，记录</span></div><div class="line">            <span class="keyword">if</span> (c == <span class="string">'\\'</span>) &#123;</div><div class="line">                precedingBackslash = !precedingBackslash;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                precedingBackslash = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//前进一位</span></div><div class="line">            keyLen++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// valueStart &lt; limit</span></div><div class="line">        <span class="keyword">while</span> (valueStart &lt; limit) </div><div class="line">            c = lr.lineBuf[valueStart];</div><div class="line">            <span class="comment">// 判断是否是空格类字符</span></div><div class="line">            <span class="keyword">if</span> (c != <span class="string">' '</span> &amp;&amp; c != <span class="string">'\t'</span> &amp;&amp; c != <span class="string">'\f'</span>) &#123;</div><div class="line">                <span class="comment">// 不是空格类字符，并且第一次出现非空格分隔符</span></div><div class="line">                <span class="keyword">if</span> (!hasSep &amp;&amp; (c == <span class="string">'='</span> || c == <span class="string">':'</span>)) &#123;</div><div class="line">                    hasSep = <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            valueStart++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 读取key和value</span></div><div class="line">        String key = loadConvert(lr.lineBuf, <span class="number">0</span>, keyLen, convtBuf);</div><div class="line">        String value = loadConvert(lr.lineBuf, valueStart, limit - valueStart, convtBuf);</div><div class="line">        <span class="comment">// 放入</span></div><div class="line">        put(key, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="store"><a href="#store" class="headerlink" title="store"></a>store</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 存储，给定Writer或OutStreamWriter和comments</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(Writer writer, String comments)</span></span></div><div class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    store0((writer <span class="keyword">instanceof</span> BufferedWriter)?(BufferedWriter)writer</div><div class="line">     : <span class="keyword">new</span> BufferedWriter(writer),comments,<span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">store0</span><span class="params">(BufferedWriter bw, String comments, <span class="keyword">boolean</span> escUnicode)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (comments != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 写入注释,用 8859-1存储中文</span></div><div class="line">            writeComments(bw, comments);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 写入时间</span></div><div class="line">        bw.write(<span class="string">"#"</span> + <span class="keyword">new</span> Date().toString());</div><div class="line">        <span class="comment">//另起一行</span></div><div class="line">        bw.newLine();</div><div class="line">        <span class="comment">// 同步</span></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (Enumeration e = keys(); e.hasMoreElements();) &#123;</div><div class="line">                String key = (String) e.nextElement();</div><div class="line">                String val = (String) get(key);</div><div class="line">                <span class="comment">// 对key中的空格转义</span></div><div class="line">                key = saveConvert(key, <span class="keyword">true</span>, escUnicode);</div><div class="line">                <span class="comment">// 不转义value的的空格</span></div><div class="line">                val = saveConvert(val, <span class="keyword">false</span>, escUnicode);</div><div class="line">                <span class="comment">// 写入按照key=value</span></div><div class="line">                bw.write(key + <span class="string">"="</span> + val);</div><div class="line">                bw.newLine();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        bw.flush();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="getProperty"><a href="#getProperty" class="headerlink" title="getProperty"></a>getProperty</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//获取属性</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">    Object oval = <span class="keyword">super</span>.get(key</div><div class="line">    <span class="comment">//存储的不是字符串就返回null</span></div><div class="line">    String sval = (oval <span class="keyword">instanceof</span> String) ? (String)oval : <span class="keyword">null</span>;</div><div class="line">    <span class="comment">//如果默认属性中存在就返回</span></div><div class="line">    <span class="keyword">return</span> ((sval == <span class="keyword">null</span>) &amp;&amp; (defaults != <span class="keyword">null</span>)) ? defaults.getProperty(key) : sval;</div><div class="line">&#125;</div><div class="line"><span class="comment">//给定默认值</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key, String defaultValue)</span> </span>&#123;</div><div class="line">    String val = getProperty(key);</div><div class="line">    <span class="comment">//默认属性集的优先级要高于给定的默认值</span></div><div class="line">    <span class="keyword">return</span> (val == <span class="keyword">null</span>) ? defaultValue : val;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a>setProperty</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 同步方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">setProperty</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> put(key, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//打印属性集</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(PrintWriter out)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(PrintStream out)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//exm：直接打印到标准输出流</span></div><div class="line">properties.list(System.out);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#介绍&quot;&gt;介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常量变量&quot;&gt;常量&amp;amp;变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#load&quot;&gt;load&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#store&quot;&gt;store&lt;/a&gt;&lt;/
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
      <category term="源码" scheme="http://www.junqson.xin/tags/%E6%BA%90%E7%A0%81/"/>
    
      <category term="集合" scheme="http://www.junqson.xin/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>图片视频转字符画</title>
    <link href="http://www.junqson.xin/2018/07/25/%E5%9B%BE%E7%89%87%E8%A7%86%E9%A2%91%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    <id>http://www.junqson.xin/2018/07/25/图片视频转字符画/</id>
    <published>2018-07-25T05:12:00.000Z</published>
    <updated>2018-07-25T05:56:41.437Z</updated>
    
    <content type="html"><![CDATA[<p>趁着暑期有点时间，还是应该静下心来写点东西的，更新一下好久不更的博客。几个月前研究的东西，现在整理一下。</p>
<h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h3><p>读取图片或视频中的某一帧中的抽样像素点，获取rgb值，根据彩色转灰度的心理学公式:</p>
<blockquote>
<p>Gray = R<em>0.299 + G</em>0.587 + B*0.114<br></p>
</blockquote>
<p>计算出灰度值g,然后将灰度g映射到字符c(g),打印输出</p>
<blockquote>
<p><img src="/img/charmap.jpg" alt="效果图"></p>
</blockquote>
<h3 id="2-实现（canvas-js）"><a href="#2-实现（canvas-js）" class="headerlink" title="2. 实现（canvas + js）"></a>2. 实现（canvas + js）</h3><h4 id="1-界面部分（略去css和其他部分）"><a href="#1-界面部分（略去css和其他部分）" class="headerlink" title="(1) 界面部分（略去css和其他部分）"></a>(1) 界面部分（略去css和其他部分）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//获取图片表单</div><div class="line">&lt;div class=&quot;bt&quot;&gt;</div><div class="line">	&lt;form id=&quot;uf&quot;&gt;</div><div class="line">        &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;up-button&quot;/&gt;</div><div class="line">        &lt;input type=&quot;button&quot; id=&quot;button&quot; value=&quot;选择图片&quot;/&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">//在css中隐藏的canvas，用以绘制图片，获取像素</div><div class="line">&lt;canvas id=&quot;cv&quot;&gt;not support ie23333&lt;/canvas&gt;</div><div class="line">//字符画展示区</div><div class="line">&lt;div id=&quot;txt&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="2-js实现"><a href="#2-js实现" class="headerlink" title="(2) js实现"></a>(2) js实现</h4><h5 id="初始工作"><a href="#初始工作" class="headerlink" title="初始工作"></a>初始工作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var cv = document.getElementById(&apos;cv&apos;);</div><div class="line">var c = cv.getContext(&apos;2d&apos;);</div><div class="line">var txtDiv = document.getElementById(&apos;txt&apos;);</div><div class="line">var fileBtn = document.getElementById(&quot;up-button&quot;);</div><div class="line">var img = new Image();</div><div class="line">img.src = &apos;abn.jpg&apos;;</div><div class="line">img.onload = init; // 图片加载完开始转换</div><div class="line">fileBtn.onchange = getImg; //绑定获取图片事件</div></pre></td></tr></table></figure>
<h5 id="计算灰度g-f-r-g-b"><a href="#计算灰度g-f-r-g-b" class="headerlink" title="计算灰度g=f(r,g,b)"></a>计算灰度g=f(r,g,b)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 根据rgb值计算灰度</div><div class="line">function getGray(r, g, b) &#123;</div><div class="line">	return 0.299 * r + 0.578 * g + 0.114 * b; //对于彩色转灰度，有一个很著名的心理学公式：Gray = R*0.299 + G*0.587 + B*0.114</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="映射规则c-c-g"><a href="#映射规则c-c-g" class="headerlink" title="映射规则c=c(g)"></a>映射规则c=c(g)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 根据灰度生成相应字符</div><div class="line">function toText(g) &#123;</div><div class="line">	if (g &lt;= 30) &#123;</div><div class="line">		return &apos;8&apos;;</div><div class="line">	&#125; else if (g &gt; 30 &amp;&amp; g &lt;= 60) &#123;</div><div class="line">		return &apos;&amp;&apos;;</div><div class="line">	&#125; else if (g &gt; 60 &amp;&amp; g &lt;= 120) &#123;</div><div class="line">		return &apos;$&apos;;</div><div class="line">	&#125;  else if (g &gt; 120 &amp;&amp; g &lt;= 150) &#123;</div><div class="line">		return &apos;*&apos;;</div><div class="line">	&#125; else if (g &gt; 150 &amp;&amp; g &lt;= 180) &#123;</div><div class="line">		return &apos;o&apos;;</div><div class="line">	&#125; else if (g &gt; 180 &amp;&amp; g &lt;= 210) &#123;</div><div class="line">		return &apos;!&apos;;</div><div class="line">	&#125; else if (g &gt; 210 &amp;&amp; g &lt;= 240) &#123;</div><div class="line">		return &apos;;&apos;;</div><div class="line">	&#125;  else &#123;</div><div class="line">		return &apos;.&apos;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function getImg(file) &#123;</div><div class="line">	var reader = new FileReader();</div><div class="line">	reader.readAsDataURL(fileBtn.files[0]);</div><div class="line">	reader.onload = function () &#123;</div><div class="line">		img.src = reader.result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// 转换</div><div class="line">function init() &#123;</div><div class="line">	//展示区同图片大小</div><div class="line">	txtDiv.style.width = img.width + &apos;px&apos;;</div><div class="line">	cv.width = img.width;</div><div class="line">	cv.height = img.height;</div><div class="line">	//绘制图片</div><div class="line">	c.drawImage(img, 0, 0);</div><div class="line">	//获取像素数据</div><div class="line">	var imgData = c.getImageData(0, 0, img.width, img.height);</div><div class="line">	//获取像素rgba值一维数组</div><div class="line">	var imgDataArr = imgData.data; </div><div class="line">	//横向像素数</div><div class="line">	var imgDataWidth = imgData.width; </div><div class="line">	//纵向像素数</div><div class="line">	var imgDataHeight = imgData.height; </div><div class="line">	var html = &apos;&apos;;</div><div class="line">	//每12行每6列取一个像素，保证原图与生成的图片的大小一致 网页一个字符的默认大小6px * 12px。参数数值可以修改，但是要确保比例必须保证delta h: delta w = 2:1</div><div class="line">	for (h = 0; h &lt; imgDataHeight; h += 12) &#123; </div><div class="line">		var p = &apos;&lt;p&gt;&apos;;</div><div class="line">		for (w = 0; w &lt; imgDataWidth; w += 6) &#123;</div><div class="line">			var index = (w + imgDataWidth * h) * 4; //获取该像素在数组中的r对应的索引，下标从0开始</div><div class="line">			var r = imgDataArr[index + 0];</div><div class="line">			var g = imgDataArr[index + 1];</div><div class="line">			var b = imgDataArr[index + 2];</div><div class="line">			var gray = getGray(r, g, b);//计算灰度值</div><div class="line">			p += toText(gray); </div><div class="line">		&#125;</div><div class="line">		p += &apos;&lt;/p&gt;&apos;;</div><div class="line">		html += p;</div><div class="line">	&#125;</div><div class="line">	txtDiv.innerHTML = html;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="3-视频的转换"><a href="#3-视频的转换" class="headerlink" title="3. 视频的转换"></a>3. 视频的转换</h3><p>以上实现了对于图片的字符画转化，对于视频，只需要在图片的基础上，按照一定的频率对视频帧取样，绘制到canvas即可。</p>
<p>在界面中，替换掉form</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;要使用的视频：&lt;/p&gt;</div><div class="line">&lt;video id=&quot;video1&quot; controls autoplay src=&quot;hx.mp4&quot; width=&quot;270px&quot;&gt;&lt;/video&gt;</div><div class="line">&lt;p&gt;画布（每 20 毫秒，代码就会绘制视频的当前帧）：&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>监听video的play事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var v = document.getElementById(&quot;video1&quot;);</div><div class="line">//获取视频宽高</div><div class="line">var width = v.style.width;</div><div class="line">var height = v.style.height; </div><div class="line"></div><div class="line">v.addEventListener(&apos;play&apos;, function() &#123;</div><div class="line">    var i = window.setInterval(function() &#123;</div><div class="line">        c.drawImage(v, 0, 0, width, height)</div><div class="line">        init();</div><div class="line">    &#125;, 20);</div><div class="line">&#125;, false);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着暑期有点时间，还是应该静下心来写点东西的，更新一下好久不更的博客。几个月前研究的东西，现在整理一下。&lt;/p&gt;
&lt;h3 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1. 原理&quot;&gt;&lt;/a&gt;1. 原理&lt;/h3&gt;&lt;p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.junqson.xin/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.junqson.xin/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="canvas" scheme="http://www.junqson.xin/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>java内部类总结</title>
    <link href="http://www.junqson.xin/2017/12/10/java%E5%86%85%E9%83%A8%E7%B1%BB%E6%80%BB%E7%BB%93/"/>
    <id>http://www.junqson.xin/2017/12/10/java内部类总结/</id>
    <published>2017-12-10T02:29:17.000Z</published>
    <updated>2018-07-25T07:03:29.780Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><ol>
<li><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Outer&#123;</div><div class="line">    class inner&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>编译后产生outer.class和outer$inner.class</li>
</ul>
<ol>
<li><h5 id="方法内部类"><a href="#方法内部类" class="headerlink" title="方法内部类"></a>方法内部类</h5></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class outer&#123;</div><div class="line">    public void doSomething()&#123;</div><div class="line">        class inner&#123;</div><div class="line">            public void seeOuter()&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方法内部类只能由该方法实例化</li>
<li>方法内部类对象无法使用方法内非final变量</li>
<li>因为方法的局部变量位于栈上，只存在于该方法的生命期内。当一个方法结束，其栈结构被删除，局部变量成为历史。但是该方法结束之后，在方法内创建的内部类对象可能仍然存在于堆中！例如，如果对它的引用被传递到其他某些代码，并存储在一个成员变量内。正因为不能保证局部变量的存活期和方法内部类对象的一样长，所以内部类对象不能使用它们。</li>
</ul>
<ol>
<li><h5 id="静态嵌套类"><a href="#静态嵌套类" class="headerlink" title="静态嵌套类"></a>静态嵌套类</h5></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class outer&#123;</div><div class="line">    static class inner&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    class test&#123;</div><div class="line">        public static void main(String[] args)&#123;</div><div class="line">            Outer.inner obj = Outer.new inner();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可类比静态域</li>
<li>静态内部类中可以定义静态或者非静态的成员。<br>从技术上讲，静态嵌套类不属于内部类。因为内部类与外部类共享一种特殊关系，更确切地说是对实例的共享关系。而静态嵌套类则没有上述关系。它只是位置在另一个类的内部，因此也被称为顶级嵌套类。<br>静态的含义是该内部类可以像其他静态成员一样，没有外部类对象时，也能够访问它。静态嵌套类仅能访问外部类的静态成员和方法。</li>
<li>在静态方法中定义的内部类也是StaticNested Class，这时候不能在类前面加static关键字，静态方法中的StaticNested Class与普通方法中的内部类的应用方式很相似，它除了可以直接访问外部类中的static的成员变量，还可以访问静态方法中的局部变量，但是，该局部变量前必须加final修饰符。</li>
</ul>
<ol>
<li><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">new ParentName()&#123;</div><div class="line">    //内部类的定义</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用情景</li>
</ul>
<ol>
<li>只用到类的一个实例</li>
<li>类在定义后马上用到</li>
<li>类非常小</li>
<li>不会对可读性影响太大</li>
</ol>
<ul>
<li>注意</li>
</ul>
<ol>
<li><p>不能有构造方法</p>
</li>
<li><p>不能定义任何静态成员、静态方法<br><br>理由：匿名内部类是晚于外部类加载的，但是匿名内部类和其对象几乎是同时加载的，但是还是早于对象加载，而静态内容是属于类的，当类加载的时候就开始加载，所以当匿名内部类中有静态内容，就会随着类加载，而这时和对象创建冲突。</p>
</li>
<li><p>不能是public protected private static</p>
</li>
<li><p>只能创建一个实例</p>
</li>
<li><p>跟在new后面，隐含实现一个接口或一个类</p>
</li>
</ol>
<h4 id="为何要使用内部类"><a href="#为何要使用内部类" class="headerlink" title="为何要使用内部类"></a>为何要使用内部类</h4><ul>
<li><p>典型的情况是，内部类继承自某个类或实现某个接口，内部类的代码操作创建其他外围类的对象。所以你可以认为内部类提供了某种进入其外围类的窗口。使用内部类最吸引人的原因是：</p>
</li>
<li><p>每个内部类都能独立地继承自一个（接口的）实现，所以无论外围类是否已经继承了某个（接口的）实现，对于内部类都没有影响。如果没有内部类提供的可以继承多个具体的或抽象的类的能力，一些设计与编程问题就很难解决。从这个角度看，内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实现了“多重继承”。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;内部类&quot;&gt;&lt;a href=&quot;#内部类&quot; class=&quot;headerlink&quot; title=&quot;内部类&quot;&gt;&lt;/a&gt;内部类&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;成员内部类&quot;&gt;&lt;a href=&quot;#成员内部类&quot; class=&quot;headerlink&quot; title=&quot;成员
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>js闭包、变量声明提前、匿名函数的全局性</title>
    <link href="http://www.junqson.xin/2017/12/09/js%E9%97%AD%E5%8C%85%E3%80%81%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%E6%8F%90%E5%89%8D%E3%80%81%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%85%A8%E5%B1%80%E6%80%A7/"/>
    <id>http://www.junqson.xin/2017/12/09/js闭包、变量声明提前、匿名函数的全局性/</id>
    <published>2017-12-09T05:29:17.000Z</published>
    <updated>2018-07-25T08:31:33.679Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一-变量声明提前"><a href="#一-变量声明提前" class="headerlink" title="一. 变量声明提前"></a>一. 变量声明提前</h4><h5 id="提示10，此时打印全局变量a"><a href="#提示10，此时打印全局变量a" class="headerlink" title="提示10，此时打印全局变量a"></a>提示10，此时打印全局变量a</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">fuction f1()&#123;</div><div class="line">    alert(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="提示undefined"><a href="#提示undefined" class="headerlink" title="提示undefined"></a>提示undefined</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">function f1()&#123;</div><div class="line">    alert(a);</div><div class="line">    var a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>js解释器在处理的时候,将变量声明提前，相当于<br>，此时屏蔽掉全局变量a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">function f1()&#123;</div><div class="line">    var a; // 未赋初值</div><div class="line">    alert(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="值得注意的是-以下也是输出undefined"><a href="#值得注意的是-以下也是输出undefined" class="headerlink" title="值得注意的是,以下也是输出undefined"></a>值得注意的是,以下也是输出undefined</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">function f1()&#123;</div><div class="line">    alert(a);</div><div class="line">    function a()&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解释器在处理的时候，会变成这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = 10;</div><div class="line">function f1()&#123;</div><div class="line">    var a = function()&#123;&#125;;</div><div class="line">    alert(a);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function f1()&#123;</div><div class="line">	a = 10;</div><div class="line">	alert(a);</div><div class="line">	var a;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1();</div><div class="line">alert(a);//脚本出错，a不存在</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function f1()&#123;</div><div class="line">	a = 10;</div><div class="line">	alert(a);</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1();</div><div class="line">alert(a); //正常输出，此时a成为全局变量</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">function f1()&#123;</div><div class="line">	alert(a);  //undefined</div><div class="line">	alert(window.a); //1</div><div class="line">	var a = 2;</div><div class="line">	alert(a); //2</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1();</div><div class="line">alert(a); //1</div></pre></td></tr></table></figure>
<h4 id="二-匿名函数的全局性"><a href="#二-匿名函数的全局性" class="headerlink" title="二. 匿名函数的全局性"></a>二. 匿名函数的全局性</h4><p>匿名函数一般由外部window对象调用，this一般指向调用者，所以匿名函数的this指向window，使用全局变量,此处可认为不构成闭包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">var name = &apos;The Window&apos;;</div><div class="line">var obj = &#123;</div><div class="line">	name: &apos;The Object&apos;,</div><div class="line">	getFunc: function()&#123;</div><div class="line">		return function()&#123;</div><div class="line">			return this.name;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">alert(obj.getFunc()()); //The Window</div><div class="line"></div><div class="line"></div><div class="line">var name = &apos;The Window&apos;;</div><div class="line">var obj = &#123;</div><div class="line">	name: &apos;The Object&apos;,</div><div class="line">	getFunc: function()&#123;</div><div class="line">		var that = this;</div><div class="line">		return function()&#123;</div><div class="line">			return that.name;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">alert(obj.getFunc()()); //The Object</div><div class="line"></div><div class="line"></div><div class="line">var name = &apos;The Window&apos;;</div><div class="line">function f1()&#123;</div><div class="line">    this.name = &apos;The Object&apos;;</div><div class="line">    function f2()&#123;</div><div class="line">        return function()&#123;</div><div class="line">            return this.name;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    return f2;</div><div class="line">&#125;s</div><div class="line"></div><div class="line">var f = f1();</div><div class="line">alert(f()()); //The Object 构成闭包</div></pre></td></tr></table></figure></p>
<h4 id="三-闭包"><a href="#三-闭包" class="headerlink" title="三. 闭包"></a>三. 闭包</h4><blockquote>
<p>闭包就是能够读取其他函数内部变量的==函数==。</p>
</blockquote>
<hr>
<h6 id="2017-12-9"><a href="#2017-12-9" class="headerlink" title="2017.12.9"></a>2017.12.9</h6>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一-变量声明提前&quot;&gt;&lt;a href=&quot;#一-变量声明提前&quot; class=&quot;headerlink&quot; title=&quot;一. 变量声明提前&quot;&gt;&lt;/a&gt;一. 变量声明提前&lt;/h4&gt;&lt;h5 id=&quot;提示10，此时打印全局变量a&quot;&gt;&lt;a href=&quot;#提示10，此时打印全局变量
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.junqson.xin/categories/JavaScript/"/>
    
    
      <category term="语法" scheme="http://www.junqson.xin/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS继承的理解</title>
    <link href="http://www.junqson.xin/2017/11/25/js%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.junqson.xin/2017/11/25/js继承的理解/</id>
    <published>2017-11-25T05:29:17.000Z</published>
    <updated>2018-08-02T09:03:11.322Z</updated>
    
    <content type="html"><![CDATA[<h4 id="出于对实用的考虑，只讨论最常用的组合式继承和最完美寄生组合式继承。"><a href="#出于对实用的考虑，只讨论最常用的组合式继承和最完美寄生组合式继承。" class="headerlink" title="出于对实用的考虑，只讨论最常用的组合式继承和最完美寄生组合式继承。"></a>出于对实用的考虑，只讨论最常用的组合式继承和最完美寄生组合式继承。</h4><h3 id="1、组合式继承"><a href="#1、组合式继承" class="headerlink" title="1、组合式继承"></a>1、组合式继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function Super(val,id)&#123;</div><div class="line">    //只定义实例域</div><div class="line">    this.val = val;</div><div class="line">    this.id = id;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">    </div><div class="line">//为父类添加方法</div><div class="line">Super.prototpye.getId = function()&#123;</div><div class="line">     return this.id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function Son(val,id,sex,name)&#123;</div><div class="line">    Super.call(this,val,id); //调用父类方法为子类添加实例域</div><div class="line">    this.sex = sex;</div><div class="line">    this.name = name;</div><div class="line">&#125;</div><div class="line">//没有指定construtor，再次调用了Super方法，产生了两套相同的父类实例域，这正是这个方法的弊端所在</div><div class="line">Son.prototype = new Super(); </div><div class="line">//为子类对添加方法</div><div class="line">Son.prototype.getSex = function()&#123;</div><div class="line">    return sex;</div><div class="line">&#125;;</div><div class="line">//实例化子类对象</div><div class="line">var son = new Son(1,0,&apos;n&apos;,&apos;sim&apos;);</div></pre></td></tr></table></figure>
<h3 id="2、寄生组合式继承"><a href="#2、寄生组合式继承" class="headerlink" title="2、寄生组合式继承"></a>2、寄生组合式继承</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">/*拷贝父类的对象，使子类拥有父类原型链上的属性和方法。此时得到一个F类的对象，该对象充当子类的prototype，而该对象的prototype</div><div class="line">指向父类的prototype，这样通过原型链继承了父类的方法和实例域，同时对子类的Prototype进行添加方法或实例域又不会影响到父类*/</div><div class="line">function copyPrototype(o)&#123;</div><div class="line">    function F()&#123;&#125;;</div><div class="line">    F.prototype = o;</div><div class="line">    var op = new F();</div><div class="line">    return op;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Super(val,id)&#123;</div><div class="line">    //只定义实例域</div><div class="line">    this.val = val;</div><div class="line">    this.id = id;</div><div class="line">    </div><div class="line">&#125;</div><div class="line">    </div><div class="line">//为父类添加方法</div><div class="line">Super.prototpye.getId = function()&#123;</div><div class="line">     return this.id;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">function Son(val,id,sex,name)&#123;</div><div class="line">    Super.call(this,val,id); //调用父类方法为子类添加实例域</div><div class="line">    this.sex = sex;</div><div class="line">    this.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Son.prototype = copyPrototype(Super.prototpye);</div><div class="line">Son.prototype.constructor = Son; //指定constructor</div><div class="line">//为子类添加方法</div><div class="line">Son.prototype.getSex = function()&#123;</div><div class="line">    return this.sex;</div><div class="line">&#125;;</div><div class="line">//实例化子类</div><div class="line">Son son = new Son(1,0,&apos;n&apos;,&apos;sim&apos;);</div></pre></td></tr></table></figure>
<h4 id="关于其他继承方法"><a href="#关于其他继承方法" class="headerlink" title="关于其他继承方法"></a>关于其他继承方法</h4><h5 id="1-简单原型链"><a href="#1-简单原型链" class="headerlink" title="1. 简单原型链"></a>1. 简单原型链</h5><p>实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Son.prototype = new Super();</div></pre></td></tr></table></figure></p>
<p>缺点</p>
<ol>
<li>修改父类的实例域时，所有的对象都被修改</li>
<li>无法向父类构造函数传参</li>
</ol>
<h5 id="2-借用构造函数"><a href="#2-借用构造函数" class="headerlink" title="2. 借用构造函数"></a>2. 借用构造函数</h5><p>实现<br>解决了简单原型链方法的两个弊端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Super.call(this,val);</div></pre></td></tr></table></figure></p>
<p>缺点</p>
<ol>
<li>无法实现函数复用，每一个对象都持有一个function</li>
</ol>
<h5 id="3-原型式"><a href="#3-原型式" class="headerlink" title="3.原型式"></a>3.原型式</h5><p>实现<br>不需要创建自定义类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var s = new Super();</div><div class="line">var son = copyProtoype(s);</div><div class="line"></div><div class="line">//增强</div><div class="line">son.attr1 = value;</div><div class="line">.......</div></pre></td></tr></table></figure></p>
<p>缺点</p>
<ol>
<li>父类原型中实例域共享</li>
<li>无法代码复用，创建子类麻烦</li>
</ol>
<h5 id="4-寄生式"><a href="#4-寄生式" class="headerlink" title="4.寄生式"></a>4.寄生式</h5><p>实现<br>不需要创建自定义类型，是原型式的简单改进，穿上了函数马甲<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function getSubObject(obj)&#123;</div><div class="line">    var son = copyProtoype(s);</div><div class="line">    //增强</div><div class="line">    son.attr1 = value;</div><div class="line">    ...</div><div class="line">    return son;</div><div class="line">&#125;</div><div class="line">var son = getSubObject(new Super());</div></pre></td></tr></table></figure></p>
<p>缺点<br>不能实现函数复用(没有原型)</p>
<ul>
<li><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3></li>
</ul>
<p>在es6中，引入class,extends等关键字，底层由js引擎完成原型链的工作，简化继承的代码量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Person&#123;</div><div class="line">   constructor(name, age) &#123;</div><div class="line">       this.name = name;</div><div class="line">       this.age = age;</div><div class="line">   &#125;</div><div class="line">   say() &#123;</div><div class="line">       console.log(&quot;I am $&#123;this.name&#125;&quot;)</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Student extends Person&#123;</div><div class="line">    construct(name, age, studentId) &#123;</div><div class="line">        super(name, age)</div><div class="line">        this.studentId = studentId;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    show()&#123;</div><div class="line">        console.log(&quot;I am a student, my name is $&#123;this.name&#125;, and my id is $&#123;this.studentId&#125;&quot;&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var xiaoming = new Student(&apos;xiaoming&apos;, 12, 001);</div><div class="line">xiaoming.say();</div><div class="line">xiaoming.show();</div></pre></td></tr></table></figure>
<ul>
<li>2018.7.30</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;出于对实用的考虑，只讨论最常用的组合式继承和最完美寄生组合式继承。&quot;&gt;&lt;a href=&quot;#出于对实用的考虑，只讨论最常用的组合式继承和最完美寄生组合式继承。&quot; class=&quot;headerlink&quot; title=&quot;出于对实用的考虑，只讨论最常用的组合式继承和最完美寄
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.junqson.xin/categories/JavaScript/"/>
    
    
      <category term="面向对象" scheme="http://www.junqson.xin/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="http://www.junqson.xin/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>一种简单加密算法</title>
    <link href="http://www.junqson.xin/2017/10/31/%E4%B8%80%E7%A7%8D%E7%AE%80%E5%8D%95%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>http://www.junqson.xin/2017/10/31/一种简单加密算法/</id>
    <published>2017-10-31T02:29:17.000Z</published>
    <updated>2018-02-22T10:10:56.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、原理：计算机逻辑运算（xor-ASC2码表（字符串处理）"><a href="#一、原理：计算机逻辑运算（xor-ASC2码表（字符串处理）" class="headerlink" title="一、原理：计算机逻辑运算（xor)+ASC2码表（字符串处理）"></a>一、原理：计算机逻辑运算（xor)+ASC2码表（字符串处理）</h3><h3 id="二、代码-nbsp-nbsp-nbsp-Pasca语言"><a href="#二、代码-nbsp-nbsp-nbsp-Pasca语言" class="headerlink" title="二、代码&nbsp;&nbsp;&nbsp;(Pasca语言)"></a>二、代码&nbsp;&nbsp;&nbsp;(Pasca语言)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">type</div><div class="line"></div><div class="line">  re=record</div><div class="line"></div><div class="line">   mingv:string;</div><div class="line"></div><div class="line">   miv:array[1..100000] of integer;</div><div class="line"></div><div class="line">   smiv:array[1..100000] of string;</div><div class="line"></div><div class="line">   l:longint;</div><div class="line"></div><div class="line">   end;</div><div class="line"></div><div class="line">var</div><div class="line"></div><div class="line">  s:array[1..10] of re; </div><div class="line"></div><div class="line">  hs,js,caozuo,jmv,nc:longint;</div><div class="line"></div><div class="line">  sc:string;</div><div class="line"></div><div class="line">    </div><div class="line"></div><div class="line">procedure encrypt;</div><div class="line"></div><div class="line">  var k:longint;</div><div class="line"></div><div class="line">  begin</div><div class="line"></div><div class="line">     s[js].l:=length(s[js].mingv);</div><div class="line"></div><div class="line">     for k:=1 to s[js].l do </div><div class="line"></div><div class="line">      begin</div><div class="line"></div><div class="line">       s[js].miv[k]:=ord(s[js].mingv[k]);</div><div class="line"></div><div class="line">       if s[js].miv[k]&lt;100 then s[js].miv[k]:=s[js].miv[k]*4;</div><div class="line"></div><div class="line">       s[js].miv[k]:=s[js].miv[k] xor jmv;</div><div class="line"></div><div class="line">       write(s[js].miv[k],&apos; &apos;);</div><div class="line"></div><div class="line">      end;</div><div class="line"></div><div class="line">  end;</div><div class="line"></div><div class="line">procedure decode;</div><div class="line"></div><div class="line">  begin</div><div class="line"></div><div class="line">    while pos(&apos; &apos;,s[js].mingv) &lt;&gt;0 do </div><div class="line"></div><div class="line">     begin</div><div class="line"></div><div class="line">       sc:=copy(s[js].mingv,1,pos(&apos; &apos;,s[js].mingv)-1);</div><div class="line"></div><div class="line">       delete(s[js].mingv,1,pos(&apos; &apos;,s[js].mingv));</div><div class="line"></div><div class="line">       val(sc,nc);</div><div class="line"></div><div class="line">       nc:=nc xor jmv;</div><div class="line"></div><div class="line">       if nc&gt;122 then nc:=nc div 4;</div><div class="line"></div><div class="line">       write(chr(nc));</div><div class="line"></div><div class="line">     end;</div><div class="line">       val(s[js].mingv,nc);</div><div class="line"></div><div class="line">       nc:=nc xor jmv;</div><div class="line"></div><div class="line">       if nc&gt;122 then nc:=nc div 4;</div><div class="line"></div><div class="line">       write(chr(nc))；</div><div class="line"></div><div class="line">  end;</div><div class="line"></div><div class="line">begin</div><div class="line"></div><div class="line">   assign(input,&apos;in.txt&apos;);</div><div class="line"></div><div class="line">   assign(output,&apos;out.txt&apos;);</div><div class="line"></div><div class="line">   reset(input);</div><div class="line"></div><div class="line">   rewrite(output);</div><div class="line"></div><div class="line">   writeln(&apos;what you want to do?&apos;);</div><div class="line"></div><div class="line">   writeln(&apos;encrypt --1 or decode  --2?&apos;);</div><div class="line"></div><div class="line">   writeln(&apos;linenumber &amp; key&apos;);</div><div class="line"></div><div class="line">   readln(caozuo);</div><div class="line"></div><div class="line">   if caozuo=1 then begin</div><div class="line"></div><div class="line">     readln(hs,jmv);</div><div class="line"></div><div class="line">     for js:=1 to hs do readln(s[js].mingv);</div><div class="line"></div><div class="line">     writeln(&apos;text:&apos;);</div><div class="line"></div><div class="line">     for js:=1 to hs do begin encrypt; writeln; end;</div><div class="line"></div><div class="line">     writeln;</div><div class="line"></div><div class="line">     writeln(&apos;key:&apos;);</div><div class="line"></div><div class="line">     writeln(not jmv);</div><div class="line"></div><div class="line">   end</div><div class="line"></div><div class="line">  else if caozuo=2 then begin</div><div class="line"></div><div class="line">    readln(hs,jmv);</div><div class="line"></div><div class="line">    jmv:=not jmv;</div><div class="line"></div><div class="line">    for js:=1 to hs do readln(s[js].mingv);</div><div class="line"></div><div class="line">    writeln(&apos;text:&apos;);</div><div class="line"></div><div class="line">    for js:=1 to hs do begin decode;writeln;  end;</div><div class="line"></div><div class="line">   end;</div><div class="line"></div><div class="line">   close(input);</div><div class="line"></div><div class="line">   close(output);</div><div class="line"></div><div class="line">end.</div></pre></td></tr></table></figure>
<h3 id="三、输入-（文件in-txt）"><a href="#三、输入-（文件in-txt）" class="headerlink" title="三、输入 （文件in.txt）"></a>三、输入 （文件in.txt）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">加密（1）1</div><div class="line"></div><div class="line">    （2）行数 密钥  （整数）                                 </div><div class="line">    （3）明文</div><div class="line"></div><div class="line">解密（1）2</div><div class="line"></div><div class="line">     （2）行数 反密钥                                   </div><div class="line"></div><div class="line">     （3）明文</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">Example：</div><div class="line"></div><div class="line">  1</div><div class="line"></div><div class="line">  1 1314</div><div class="line"></div><div class="line">  Good morning,sir</div></pre></td></tr></table></figure>
<h3 id="四、输出（out-txt）"><a href="#四、输出（out-txt）" class="headerlink" title="四、输出（out.txt）"></a>四、输出（out.txt）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  （1）密文——多组数字（空格隔开）</div><div class="line"></div><div class="line">  （2）反密钥</div><div class="line"></div><div class="line">Example</div><div class="line"></div><div class="line">what you want to do?</div><div class="line"></div><div class="line">encrypt --1 or decode  --2?</div><div class="line"></div><div class="line">linenumber &amp; key</div><div class="line"></div><div class="line">text:</div><div class="line"></div><div class="line">1349 1357 1357 1350 1442 1359 1357 1360 1356 1355 1356 1349 1426 1361 1355 1360 (一行）</div><div class="line"></div><div class="line">key:</div><div class="line"></div><div class="line">-1315</div></pre></td></tr></table></figure>
<h6 id="不保证数据一定准确（一定概率出错（要看密钥的情况））"><a href="#不保证数据一定准确（一定概率出错（要看密钥的情况））" class="headerlink" title="不保证数据一定准确（一定概率出错（要看密钥的情况））"></a>不保证数据一定准确（一定概率出错（要看密钥的情况））</h6><hr>
<h6 id="2015-8-11"><a href="#2015-8-11" class="headerlink" title="2015-8-11"></a>2015-8-11</h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、原理：计算机逻辑运算（xor-ASC2码表（字符串处理）&quot;&gt;&lt;a href=&quot;#一、原理：计算机逻辑运算（xor-ASC2码表（字符串处理）&quot; class=&quot;headerlink&quot; title=&quot;一、原理：计算机逻辑运算（xor)+ASC2码表（字符串处理）&quot;
    
    </summary>
    
      <category term="算法" scheme="http://www.junqson.xin/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="加密" scheme="http://www.junqson.xin/tags/%E5%8A%A0%E5%AF%86/"/>
    
      <category term="Pascal" scheme="http://www.junqson.xin/tags/Pascal/"/>
    
  </entry>
  
  <entry>
    <title>【集】何处轻吟浅唱</title>
    <link href="http://www.junqson.xin/2017/10/29/%E3%80%90%E9%9B%86%E3%80%91%E4%BD%95%E5%A4%84%E8%BD%BB%E5%90%9F%E6%B5%85%E5%94%B1/"/>
    <id>http://www.junqson.xin/2017/10/29/【集】何处轻吟浅唱/</id>
    <published>2017-10-29T07:36:49.000Z</published>
    <updated>2018-02-22T10:11:56.803Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>生死契阔，与子成说，执子之手，与子偕老。</p>
</li>
<li><p>雁字回时，月满西楼。花自飘零水自流。<br>一种相思，两处闲愁。<br>此情无计可消除，才下眉头，却上心头。</p>
</li>
<li><p>人生若只如初见，何事秋风悲画扇。<br>等闲变却故人心，却道故人心易变。</p>
</li>
<li><p>一生一世一双人，半梦半醒半浮生。</p>
</li>
<li><p>山有木兮木有枝，心悦君兮君不知。</p>
</li>
<li><p>初见无心，再见惊鸿。</p>
</li>
<li><p>平生不会相思，才会相思，便害相思。<br>身似浮云，心如飞絮，气若游丝。</p>
</li>
<li><pre>你说烟雨微茫，兰亭远望，后来轻揽婆娑，深遮霓裳；
你说春光烂漫，绿袖红香，后来内掩西楼，静立卿旁；
你说软风轻拂，醉卧思量，后来紧掩门窗，幔帐成殇；
你说情丝柔肠，如何相忘，我却眼波微转，兀自成霜！</pre>
</li>
<li><p>两姓联姻，一堂缔约，良缘永结，匹配同称。看此日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽。谨以白头之约，书向鸿笺，好将红叶之盟，载明鸳谱。此证。”</p>
</li>
<li><p>一壶酒，一匹马，一树桃花，姑娘，若我许你锦绣年华，可愿陪我浪迹天涯？</p>
</li>
<li><pre>待我长发及腰，将军归来可好？
此身君子意逍遥，怎料山河萧萧。
天光乍破遇，暮雪白头老。
寒剑默听奔雷，长枪独守空壕。
醉卧沙场君莫笑，一夜吹彻画角。
江南晚来客，红绳结发梢。

待卿长发及腰，我必凯旋回朝。
昔日纵马任逍遥，俱是少年英豪。
东都霞色好，西湖烟波渺。
执枪血战八方，誓守山河多娇。
应有得胜归来日，与卿共度良宵。
盼携手终老，愿与子同袍。</pre>
</li>
<li><pre>江南三月雨微茫，罗伞叠烟湿幽香。
夏日微熏正可人，却傍佳木趁阴凉。
霜风清和更初霁，轻蹙峨眉锁朱窗。
怜卿一片相思意，尤恐流年折鸳鸯。</pre>
</li>
<li><p>柔情似水，佳期如梦，忍顾鹊桥归路。<br>两情若是长久时，又岂在朝朝暮暮？</p>
</li>
<li><p>你在南方的艳阳里大雪纷飞，<br>我在北方的寒夜里四季如春。</p>
</li>
<li><p>他说你任何为人称道的美丽不及他第一次遇见你<br>时光苟延残喘无可奈何</p>
</li>
<li><p>他们在别有用心的生活里翩翩起舞<br>你在我后半生的城市里长生不老</p>
</li>
<li><p>你可知道你的名字解释了我的一生<br>碎了满天的往事如烟<br>与世无争 </p>
</li>
<li><p>我愿用我剩下的时光<br>再和你说那一句<br>愿意此时遇见你 不是未来 不是过去<br>因为过去我们早已失去 未来太远不着边际</p>
</li>
<li><p>一点朱砂，两方罗帕，三五鸿雁，乱了四季扬花。</p>
</li>
<li><p>如果你驯养我，那我的生命将会充满阳光，你的脚步声会变得跟别人不一样，其他人的脚步声会让我迅速躲到地底下，而你的脚步声则会像音乐一样，把我召唤出洞穴</p>
</li>
<li><p>宜言饮酒，与子偕老；琴瑟在御，莫不静好。</p>
</li>
<li><p>入我相思门，知我相思苦，长相思兮长相忆，短相思兮无穷极。</p>
</li>
<li><p>既不回头，何必不忘。既然无缘，何须誓言。今日种种，似水无痕。明夕何夕，君已陌路</p>
</li>
<li><p>若有来生，我愿为树，一叶之灵，窥尽全秋</p>
</li>
<li><p>曾虑多情损梵行，入山又恐别倾城，世间安得双全法，不负如来不负卿</p>
</li>
<li><p>梨花院落溶溶月，柳絮池塘淡淡风<br>三生桃花绘成扇，细雨落花人独看</p>
</li>
<li><p>烟波画桥，风帘翠幕，三秋桂子，十里荷花。王孙倚马，公子登楼，游人佳客，钓叟莲娃。</p>
</li>
<li><p>染火枫林，琼壶歌月，长歌倚楼。岁岁年年，花前月下，一樽芳酒。水落红莲，唯闻玉磬，但此情依旧</p>
</li>
<li><p>与君醉笑三千场，不诉离殇</p>
</li>
<li><p>心有猛虎，细嗅蔷薇</p>
</li>
<li><p>系门前柳影兰舟，烟满吟蓑，风漾闲钩。石上云生，山间树老，桥外霞收。<br>玩青史低头袖手，问红尘缄口回头。醉月悠悠，漱石休休，水可陶情，花可融愁。</p>
</li>
<li><pre>一月你还没有出现
二月你睡在隔壁
三月下起了大雨
四月里遍地蔷薇
五月我们对面坐着 犹如梦中 就这样六月来了
六月里青草盛开 处处芬芳
七月，悲喜交加 麦浪翻滚连同草地 直到天涯
八月就是八月
八月我守口如瓶 八月里我是瓶中的水 你是青天的云
九月和十月 是两只眼睛 装满了大海
你在海上 我在海下
十一月尚未到来
透过它的窗口 我看见了十二月
十二月大雪弥漫，淹没了一整年的思念，悲伤走样</pre>
</li>
<li><p>我欲与君相知，<br>长命无绝衰。<br>山无陵，<br>江水为竭，<br>冬雷震震，<br>夏雨雪 ，<br>天地合 ，<br>乃敢与君绝。</p>
</li>
<li><p>水流深，沧笙踏歌；三生阴晴圆缺，一朝悲欢离合。</p>
</li>
<li><p>此情应是长相守，你若无心我便休，灵犀从此锁高楼。</p>
</li>
<li><p>春日游，杏花吹满头。陌上谁家少年，足风流。<br>妾拟将身嫁与，一生休。纵被无情弃，不能羞。</p>
</li>
<li><p>门虽设，常掩秋来春去过。花尽落，曾是风吹雨打过。人亦错，时光亦过。</p>
</li>
<li><p>人人尽说江南好，游人只合江南老。<br>春水碧于天，画船听雨眠。<br>垆边人似月，皓腕凝霜雪。<br>未老莫还乡，还乡须断肠。</p>
</li>
<li><p>我是人间惆怅客，知君何事泪纵横，断肠声里忆平生。</p>
</li>
<li><p>野百合散开在黄昏的山巅<br>有谁在月光下变成桂树<br>可以逃过夜夜的思念</p>
</li>
<li><p>我曾踏月而去，只因你在山中</p>
</li>
<li><p>还记得你说世界美好事情真的特别多 只是很容易擦肩而过</p>
</li>
<li><p>我可以锁住笔 为什么<br>却锁不住爱和忧伤<br>在长长的一生里 为什么<br>欢乐总是乍现就凋落<br>走的最急的都是最美的时光 </p>
</li>
<li><p>后来离开你 我只学会了两种表情<br>失声痛哭和放声大笑<br>过滤掉其间所有起起落落明明灭灭的琐碎情绪 在时光岁月中缄默不言<br>疲惫的神情 不停流汗的眼睛 和伤亡败阵的心</p>
</li>
<li><p>雾起时 我就在你的怀里 林间充满了湿润的芳香 充满了那不断重现的少年时光</p>
</li>
<li><p>月光衣我以华裳<br>林间有新绿似我青春模样<br>青春透明如醇酒<br>可饮 可尽 可别离<br>但终我俩多少物换星移的韶华<br>却总不能将它忘记  </p>
</li>
<li><p>我已无诗 世间也再无飞花 无细雨</p>
</li>
<li><p>等待是一生中最初的苍老<br>是令人日渐消瘦的心事<br>是举著前莫名的伤悲<br>是记忆里一场不散的筵席<br>是不能饮不可饮，也要拼却的一醉</p>
</li>
<li><p>浮华一生，淡忘一季。空有回忆，打乱缠绵。笑容不见，落寞万千。弦，思华年。</p>
</li>
<li><p>一杯香茗，一卷书，偷得半日闲散；一抹斜阳，一壶酒，愿求半世逍遥。</p>
</li>
<li><p>贺卿得高迁，卿当日胜贵，吾独向黄泉。</p>
</li>
<li><p>年年岁岁花相似，岁岁年年人不同。</p>
</li>
<li><p>身无彩凤双飞翼，心有灵犀一点通。</p>
</li>
<li><p>沧海月明珠有泪，蓝田日暖玉生烟。此情可待成追忆，只是当时已惘然。——《锦瑟》</p>
</li>
<li><p>衣带渐宽终不悔，为伊消得人憔悴。——柳永</p>
</li>
<li><p>我单手一挥,负手而立,错,是朕的江山如画</p>
</li>
<li><p>他年我若为青帝，报与桃花一处开</p>
</li>
<li><p>愿你有梦为马，随处可栖</p>
</li>
<li><p>明月无眠思杨柳，清风有梦寄倩人</p>
</li>
<li><p>时光和破碎的梦想，被埋葬在一起不停的发酵，无法停止</p>
</li>
<li><p>孤枕偏生蝴蝶梦,吟鞋怕上凤凰楼</p>
</li>
<li><p>琵琶弦上说相思，当时明月在，曾照彩云归</p>
</li>
<li><p>好在时光仁慈，我们还能拥有回忆. </p>
</li>
<li><p>最难受的思念，不是对方不知道你的思念，而是他知道却无所谓。有些人，无论你怎么对他好，他也不会留意，因为他的生命里，你显得是多么的微不足道。</p>
</li>
<li><p>哀伤的不会忘却那只是一些片段<br>忘却的无法消失他们躲在树后面</p>
</li>
<li><p>你给我听好 想哭就要笑<br>其实你知道烦恼会解决烦恼<br>新的刚来到 旧的就忘掉<br>渺小的控诉只是证明生活并不无聊</p>
</li>
<li><p>阳光温热，岁月静好，你还不来，我怎敢老去。——张爱玲</p>
</li>
<li><p>渐渐的开始害怕黑夜，最近常常失眠，当你闭上眼睛的时候，最痛苦的事情就是，竟然再也找不到醒来的理由。——郭敖 《给未知恋人的情书》</p>
</li>
<li><p>无可奈何花落去 似曾相识燕归来</p>
</li>
<li><p>望美人兮未来，临风恍兮诰歌</p>
</li>
<li><p>流浪的人不会为任何人停留，带不走的便是留不住的</p>
</li>
<li><p>“此生不负”<br>“此生不负？何为不负？彼年豆蔻，谁许谁地老天荒？”</p>
</li>
<li><p>你的微笑是我终此残生无法再见的光</p>
</li>
<li><p>有的爱情，只能启于唇齿，止于流年<br>有的爱情，只能深藏心底，示以友谊</p>
</li>
<li><pre>她只想要一套小房子，
能做你的小妻子，
一起提着菜篮子，
穿过门前的小巷子，
饭后用不着你洗盘子，
可你得负责抹桌子，
再要个胖胖的小孩子，
可爱得就象小丸子，
等你长出了白胡子，
坐在家中老椅子，
可会记得这好日子，
和她美丽的花裙子。</pre>
</li>
<li><p>若非青春苦短 怎知来日方长<br>若非失意流浪 怎知世态炎凉</p>
</li>
<li><p>听过很多道理，却依然过不好这一生。</p>
</li>
<li><p>去年今日此门中，人面桃花相映红。<br>人面不知何处去，桃花依旧笑春风。</p>
</li>
<li><p>满树桃花嫩 ,漂花遮人目.  欲待手拂去, 蝴蝶绕人足. </p>
</li>
<li><p>一首相思入曲魂 ，一人独奏一伤神，情深堪苦，情淡似浮云 。<br>转瞬东风他处遁，旧时桃色了无痕，今朝月缺 ，谁在赋词文？</p>
</li>
<li><ol>
<li>设使国家无有孤，不知当几人称帝，几人称王！</li>
<li>龙能大能小，能升能隐；大则兴云吐雾，小 则隐介藏形；升则飞腾于宇宙之间，隐则潜伏于波涛之内。方今春深，龙乘时变化， 犹人得志而纵横四海。龙之为物，可比世之英雄。</li>
<li>夫英雄者，胸怀大志，腹有良谋，有包藏宇宙之机，吞吐天地之志者也！</li>
<li>或成侠成魔，或为善为恶，小说不止小境界。采漠北狼烟，惊塞上飞鹰：萧峰魂断，狄云梦醒，胡斐心迷，杨过情痴，英雄魂梦随心情种种付流水，教多少儿女泪落青衫。诡如东方，奸如慕容，伪如不群，狂如我行，千秋霸业尽付一枕黄粱。琴断箫折，逝魔教长老，正派耆宿，与谁同奏笑傲江湖曲？<br>　　 时释禅释儒，时说道说义，大匠自有大胸怀。忆江南旧事，赴中原逐鹿：嵩山风疾，峨嵋月冷，昆仑雪深，点苍花凋，武林风月伴雪花片片舞连天，惹几处院落叹生华发。妖若黄蓉，美若语嫣，巧若双儿，艳若康敏，三春佳丽悉入万丈紫陌。心灰意懒，舍倚天长剑，屠龙宝刀，惟我独参怒目金刚经。</li>
</ol>
</li>
<li><p>人生是场繁华与荒芜并存的旅行，冷暖自知，苦乐在心。</p>
</li>
<li><p>每个人的心里都住着两个自己，一个想要过平淡安稳世俗眼光下合理的生活，一个不安分 蠢蠢欲动 充满梦幻般的小野心，而大多时候的战争，都是自己与自己为敌。</p>
</li>
<li><p>时光和破碎的梦想，被埋葬在一起不停的发酵，无法停止。</p>
</li>
<li><p>用我一生换你十年天真无邪。——南派三叔 《盗墓笔记》</p>
</li>
<li><p>You know my loneliness is only kept for you, my sweet songs are only sung for you.<br>你可知我百年的孤寂只为你一人守侯，千夜的恋歌只为你一人而唱。</p>
</li>
<li><p>岁月长，衣衫薄</p>
</li>
<li><p>你懂得越多，你就越像这个世界的孤儿</p>
</li>
<li><p>我是站在时光里想念你的树 枝桠因心事太多而静默 你欣喜也好 沉默也好 我已丢掉光阴 找到平静</p>
</li>
<li><p>春到芳菲春将尽，情到深处情转薄</p>
</li>
<li><p>明月无眠思杨柳，清风有梦寄倩人</p>
</li>
<li><p>我的心是旷野的鸟，在你的眼睛里找到了天空</p>
</li>
<li><p>对在乎你牵挂你为你哭的人好一点，别哪天一梦醒来发现在数星星的时候把月亮弄丢了。</p>
</li>
<li><pre>等待是一生中最初的苍老 
是令人日渐消瘦的心事 
是举著前莫名的伤悲 
是记忆里一场不散的筵席 
是不能饮不可饮，也要拼却的一醉</pre>
</li>
<li><p>如果你是条船，漂泊就是你的命运，可别靠岸。</p>
</li>
<li><p>自在飞花轻似梦，无边丝雨细如愁</p>
</li>
<li><p>百般想 千般念 万般无奈</p>
</li>
<li><p>非笑人间繁事端，何来此多贪嗔怨？想念故国凌三界，处处清净无尘染。转腰回眸望来路，是非成败随风散。生死由我不由命，乐悲在己不在天。曲中自有乾坤在。园内风景待探看。</p>
</li>
<li><p>缘起 在人群中 我看见你<br>缘灭 我看见你 在人群中</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;生死契阔，与子成说，执子之手，与子偕老。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;雁字回时，月满西楼。花自飘零水自流。&lt;br&gt;一种相思，两处闲愁。&lt;br&gt;此情无计可消除，才下眉头，却上心头。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人生若只如初见，何事秋风悲画扇。&lt;b
    
    </summary>
    
      <category term="文艺" scheme="http://www.junqson.xin/categories/%E6%96%87%E8%89%BA/"/>
    
    
      <category term="诗词" scheme="http://www.junqson.xin/tags/%E8%AF%97%E8%AF%8D/"/>
    
      <category term="短句" scheme="http://www.junqson.xin/tags/%E7%9F%AD%E5%8F%A5/"/>
    
  </entry>
  
  <entry>
    <title>【贪心算法】田忌赛马</title>
    <link href="http://www.junqson.xin/2017/10/28/%E3%80%90%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%E3%80%91%E7%94%B0%E5%BF%8C%E8%B5%9B%E9%A9%AC/"/>
    <id>http://www.junqson.xin/2017/10/28/【贪心算法】田忌赛马/</id>
    <published>2017-10-28T05:28:14.000Z</published>
    <updated>2018-11-01T09:19:01.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、故事背景"><a href="#一、故事背景" class="headerlink" title="一、故事背景"></a>一、故事背景</h3><p>  田忌赛马出自《史记》卷六十五：《孙子吴起列传第五》，是中国历史上有名的揭示如何善用自己的长处去对付对手的短处，从而在竞技中获胜的事例。</p>
<p>  齐使者如梁，孙膑以刑徒阴见，说齐使。齐使以为奇，窃载与之齐。齐将田忌善而客待之。忌数与齐诸公子驰逐重射。孙子见其马足不甚相远，马有上、中、下辈。于是孙子谓田忌曰：“君弟重射，臣能令君胜。”田忌信然之，与王及诸公子逐射千金。及临质，孙子曰：“今以君之下驷与彼上驷，取君上驷与彼中驷，取君中驷与彼下驷。”既驰三辈毕，而田忌一不胜而再胜，卒得王千金。于是忌进孙子于威王。威王问兵法，遂以为师。</p>
<p>  译文：齐国使者到大梁来，孙膑以刑徒的身份秘密拜见，劝说齐国使者。齐国使者觉得此人是个奇人，就偷偷地把他载回齐国。齐国将军田忌非常赏识他，并且待如上宾。田忌经常与齐国众公子赛马，设重金赌注。孙膑发现他们的马脚力都差不多，马分为上、中、下三等，于是对田忌说：“您只管下大赌注，我能让您取胜。”田忌相信并答应了他，与齐王和各位公子用千金来赌注。比赛即将开始，孙膑说：“现在用您的下等马对付他们的上等马，用您的上等马对付他们的中等马，用您的中等马对付他们的下等马。”已经比了三场比赛，田忌一场败而两场胜，最终赢得齐王的千金赌注。于是田忌把孙膑推荐给齐威王。齐威王向他请教了兵法，于是把他当成老师。</p>
<h3 id="二、题目HUD1052-Tian-Ji-–-The-Horse-Racing"><a href="#二、题目HUD1052-Tian-Ji-–-The-Horse-Racing" class="headerlink" title="二、题目HUD1052 Tian Ji – The Horse Racing"></a>二、题目HUD1052 Tian Ji – The Horse Racing</h3><p><img src="/img/tianji.png" alt="田忌赛马"></p>
<h3 id="三、样例输入输出"><a href="#三、样例输入输出" class="headerlink" title="三、样例输入输出"></a>三、样例输入输出</h3><ol>
<li>输入<br>3<br><br>92 83 71<br><br>95 87 74<br><br>2<br><br>20 20 <br><br>20 20 <br><br>2<br><br>20 19<br><br>22 18 <br><br>0<br></li>
<li>输出<br>200<br><br>0 <br><br>0<br><h3 id="四、算法思想-贪心（几率最大化-最大收益）"><a href="#四、算法思想-贪心（几率最大化-最大收益）" class="headerlink" title="四、算法思想 贪心（几率最大化 最大收益）"></a>四、算法思想 贪心（几率最大化 最大收益）</h3>首先将两者的马按速度递增排序，然后按照一至五条件依次进行判断，其中包括（田【最快】=齐【最快】 and 田【最慢】=齐【最慢】）的情况，按照条件5执行。<ol>
<li>田忌最慢的马比齐王最慢的马快，两者进行比赛，获胜。</li>
<li>田忌最慢的马比齐王最慢的马慢，用田忌最慢的马和齐王最快的马比赛，输掉</li>
<li>田忌最快的马比齐王最快的马快，两者进行比赛，获胜。</li>
<li>田忌最快的马比齐王最快的马慢，用田忌最慢的马和齐王最快的马比赛，输掉。</li>
<li>田忌最慢的马比齐王最快的马慢，用田忌最慢的马和齐王最快的马比赛，输掉。</li>
</ol>
</li>
</ol>
<h3 id="五、代码"><a href="#五、代码" class="headerlink" title="五、代码"></a>五、代码</h3><h4 id="1-pascal"><a href="#1-pascal" class="headerlink" title="1. pascal"></a>1. pascal</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">var n,st,ft,sq,fq,ans,i:longint;</div><div class="line">    t,q:array[1..2000] of longint;</div><div class="line">procedure inpu;</div><div class="line">begin</div><div class="line">  for i:=1 to n do</div><div class="line">    read(t[i]);</div><div class="line">  for i:=1 to n do</div><div class="line">    read(q[i]);</div><div class="line">end;</div><div class="line">procedure sortt(l,r: longint);</div><div class="line">var i,j,x,y: longint;</div><div class="line">begin</div><div class="line">  i:=l;j:=r;x:=t[(l+r) div 2];</div><div class="line">  repeat</div><div class="line">    while t[i]&lt;x do</div><div class="line">      inc(i);</div><div class="line">    while x&lt;t[j] do</div><div class="line">      dec(j);</div><div class="line">    if not(i&gt;j) then begin</div><div class="line">      y:=t[i];</div><div class="line">      t[i]:=t[j];</div><div class="line">      t[j]:=y;</div><div class="line">      inc(i);</div><div class="line">      j:=j-1;</div><div class="line">    end;</div><div class="line">    until i&gt;j;</div><div class="line">  if l&lt;j then</div><div class="line">    sortt(l,j);</div><div class="line">  if i&lt;r then</div><div class="line">    sortt(i,r);</div><div class="line">end;</div><div class="line">procedure sortq(l,r: longint);</div><div class="line">var i,j,x,y: longint;</div><div class="line">begin</div><div class="line">  i:=l;j:=r;x:=q[(l+r) div 2];</div><div class="line">  repeat</div><div class="line">    while q[i]&lt;x do</div><div class="line">      inc(i);</div><div class="line">    while x&lt;q[j] do</div><div class="line">      dec(j);</div><div class="line">    if not(i&gt;j) then begin</div><div class="line">      y:=q[i];</div><div class="line">      q[i]:=q[j];</div><div class="line">      q[j]:=y;</div><div class="line">      inc(i);</div><div class="line">      j:=j-1;</div><div class="line">    end;</div><div class="line">    until i&gt;j;</div><div class="line">  if l&lt;j then</div><div class="line">    sortq(l,j);</div><div class="line">  if i&lt;r then</div><div class="line">    sortq(i,r);</div><div class="line">end;</div><div class="line">procedure process;</div><div class="line">begin</div><div class="line">  sortt(1,n);</div><div class="line">  sortq(1,n);</div><div class="line">  st:=1;</div><div class="line">  sq:=1;</div><div class="line">  ft:=n;</div><div class="line">  fq:=n;</div><div class="line">end;</div><div class="line">procedure oupu;</div><div class="line">begin</div><div class="line">  writeln(ans);</div><div class="line">end;</div><div class="line">procedure main;</div><div class="line">begin</div><div class="line">  for i:=1 to n do begin</div><div class="line">    if (t[st]&gt;q[sq]) then begin</div><div class="line">      inc(st);</div><div class="line">      inc(sq);</div><div class="line">      inc(ans,200);</div><div class="line">      continue;</div><div class="line">    end;</div><div class="line">    if (t[st]&lt;q[sq]) then begin</div><div class="line">      inc(st);</div><div class="line">      dec(fq);</div><div class="line">      dec(ans,200);</div><div class="line">      continue;</div><div class="line">    end;</div><div class="line">    if (t[ft]&gt;q[fq]) then begin</div><div class="line">      dec(ft);</div><div class="line">      dec(fq);</div><div class="line">      inc(ans,200);</div><div class="line">     continue;</div><div class="line">    end;</div><div class="line">    if (t[ft]&lt;q[fq]) then begin</div><div class="line">      inc(st);</div><div class="line">      dec(fq);</div><div class="line">      dec(ans,200);</div><div class="line">      continue;</div><div class="line">    end;</div><div class="line">    if (t[st]&lt;q[fq]) then dec(ans,200);</div><div class="line">    inc(st);</div><div class="line">    dec(fq); </div><div class="line">  end;</div><div class="line">end;</div><div class="line">begin</div><div class="line"> readln(n);</div><div class="line"> while n&lt;&gt;0 do begin</div><div class="line">  ans:=0;</div><div class="line">  inpu;</div><div class="line">  process;</div><div class="line">  main;</div><div class="line">  oupu;</div><div class="line">  readln(n);</div><div class="line"> end;</div><div class="line">end.</div></pre></td></tr></table></figure>
<h4 id="2-C语言"><a href="#2-C语言" class="headerlink" title="2. C语言"></a>2. C语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;cstdio&gt;</div><div class="line">#include &lt;cstdlib&gt;</div><div class="line">using namespace std;</div><div class="line">int t[2001],q[2001];</div><div class="line">int st,sq,ft,fq,ans,n;</div><div class="line">int inpu()</div><div class="line">  &#123;</div><div class="line">  	for (int i=1;i&lt;=n;++i)</div><div class="line">  	  scanf(&quot;%d&quot;,&amp;t[i]);</div><div class="line">  	for (int i=1;i&lt;=n;++i)</div><div class="line">  	  scanf(&quot;%d&quot;,&amp;q[i]);</div><div class="line">  &#125;</div><div class="line">int sortt(int l,int r)</div><div class="line">  &#123;  </div><div class="line">  	int i=l; int j=r; int y; </div><div class="line">  	int x=t[(l+r)/2];</div><div class="line">  	do</div><div class="line">  	  &#123;</div><div class="line">  	  	 while (t[i]&lt;x) ++i;</div><div class="line">  	  	 while (x&lt;t[j]) --j;</div><div class="line">  	  	 if (i&lt;=j) </div><div class="line">  	  	   &#123; </div><div class="line">  	  	      y=t[i];</div><div class="line">  	  	      t[i]=t[j];</div><div class="line">  	  	      t[j]=y;</div><div class="line">  	  	      ++i; --j;</div><div class="line">		   &#125;</div><div class="line">	  &#125;</div><div class="line">	while (i&lt;=j);</div><div class="line">	if (l&lt;j) sortt(l,j);</div><div class="line">	if (i&lt;r) sortt(i,r);	   </div><div class="line">  &#125;</div><div class="line">int sortq(int l,int r)</div><div class="line">  &#123;  </div><div class="line">  	int i=l; int j=r; int y; </div><div class="line">  	int x=q[(l+r)/2];</div><div class="line">  	do</div><div class="line">  	  &#123;</div><div class="line">  	  	 while (q[i]&lt;x) ++i;</div><div class="line">  	  	 while (x&lt;q[j]) --j;</div><div class="line">  	  	 if (i&lt;=j) </div><div class="line">  	  	   &#123; </div><div class="line">  	  	      y=q[i];</div><div class="line">  	  	      q[i]=q[j];</div><div class="line">  	  	      q[j]=y;</div><div class="line">  	  	      ++i; --j;</div><div class="line">		   &#125;</div><div class="line">	  &#125;</div><div class="line">	while (i&lt;=j);</div><div class="line">	if (l&lt;j) sortq(l,j);</div><div class="line">	if (i&lt;r) sortq(i,r);	   </div><div class="line">  &#125;</div><div class="line">int process()</div><div class="line">  &#123;</div><div class="line">  	sortt(1,n); sortq(1,n);</div><div class="line">  	st=sq=1; ft=fq=n;</div><div class="line">  &#125;  </div><div class="line">int oupu()</div><div class="line">  &#123;</div><div class="line">  	cout&lt;&lt;ans&lt;&lt;endl;	</div><div class="line">  &#125;</div><div class="line">int maina()</div><div class="line">  &#123;</div><div class="line">  	for (int i=1;i&lt;=n;++i)</div><div class="line">  	  &#123;</div><div class="line">  	  	if (t[st]&gt;q[sq])  &#123;++st; ++sq; ans+=200; continue;&#125;</div><div class="line">  	  	if (t[st]&lt;q[sq])  &#123;++st; --fq; ans-=200; continue;&#125;</div><div class="line">	        if (t[ft]&gt;q[fq])  &#123;--ft; --fq; ans+=200; continue;&#125;</div><div class="line">		if (t[ft]&lt;q[fq])  &#123;++st; --fq; ans-=200; continue;&#125;</div><div class="line">		if (t[st]&lt;q[fq])  ans-=200; ++st; --fq;</div><div class="line">	  &#125;</div><div class="line">  &#125;</div><div class="line">int main()</div><div class="line">  &#123;</div><div class="line">  	cin&gt;&gt;n;</div><div class="line">  	while (n!=0) </div><div class="line">  	  &#123;</div><div class="line">  	  	ans=0;</div><div class="line">  	  	inpu();</div><div class="line">  	  	process();</div><div class="line">  	  	maina();</div><div class="line">  	  	oupu();</div><div class="line">  	  	cin&gt;&gt;n;</div><div class="line">		&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、故事背景&quot;&gt;&lt;a href=&quot;#一、故事背景&quot; class=&quot;headerlink&quot; title=&quot;一、故事背景&quot;&gt;&lt;/a&gt;一、故事背景&lt;/h3&gt;&lt;p&gt;  田忌赛马出自《史记》卷六十五：《孙子吴起列传第五》，是中国历史上有名的揭示如何善用自己的长处去对付对手的
    
    </summary>
    
      <category term="算法" scheme="http://www.junqson.xin/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题解" scheme="http://www.junqson.xin/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="贪心" scheme="http://www.junqson.xin/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】斜杠(forward salash)与反斜杠(back salash)在路径应用中的区别</title>
    <link href="http://www.junqson.xin/2017/10/27/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91%E6%96%9C%E6%9D%A0-forward-salash-%E4%B8%8E%E5%8F%8D%E6%96%9C%E6%9D%A0-back-salash-%E5%9C%A8%E8%B7%AF%E5%BE%84%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.junqson.xin/2017/10/27/【笔记】斜杠-forward-salash-与反斜杠-back-salash-在路径应用中的区别/</id>
    <published>2017-10-27T02:46:18.195Z</published>
    <updated>2018-02-22T10:07:13.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【笔记】斜杠-forward-salash-与反斜杠-back-salash-在路径应用中的区别"><a href="#【笔记】斜杠-forward-salash-与反斜杠-back-salash-在路径应用中的区别" class="headerlink" title="【笔记】斜杠(forward salash)与反斜杠(back salash)在路径应用中的区别"></a>【笔记】斜杠(forward salash)与反斜杠(back salash)在路径应用中的区别</h1><h3 id="一、各系统下的文件路径"><a href="#一、各系统下的文件路径" class="headerlink" title="一、各系统下的文件路径"></a><p color="red">一、各系统下的文件路径</p></h3><ol>
<li><p>unix系统中使用斜杠（/）作为路径分隔符。</p>
</li>
<li><p>Windows早期使用斜杠（/）<br>作为DOS命令提示符的参数标志。  为了防止混淆，采用反斜杠（\） 作为路径分隔符。<br>所以目前windows系统上的文件浏览器都是用 反斜杠（\） 作为路径分隔符。随着发展，DOS系统已经被淘汰了，命令提示符也用的很少，斜杆和反斜杠在大多数情况下可以互换，没有影响。Windows文件资源管理器地址栏认为斜杠和反斜杠是等效的。</p>
<h3 id="二、C语言中的文件路径字符串"><a href="#二、C语言中的文件路径字符串" class="headerlink" title="二、C语言中的文件路径字符串"></a><p color="red">二、C语言中的文件路径字符串</p></h3></li>
</ol>
<p>在Windows下的C（C++）语言中，由于Windows路径使用反斜杠\，但“\”同时是转义序列的引导，所以要写成“\”，比如文件路径字符串”C:\Users\Administrator\Destop\filename.file”。而在Unix，Linux和其他类Unix系统中，使用斜杠（/)。</p>
<h3 id="三、网络领域的的应用"><a href="#三、网络领域的的应用" class="headerlink" title="三、网络领域的的应用"></a><p color="red">三、网络领域的的应用</p></h3><p>1.由于早期web应用受Unix的影响。浏览器地址栏的网址，URL统一资源定位符使用斜杠（/）。<br>2.在HTML中涉及网络文件地址的要使用斜杠（/），比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p style=&quot;background-image:url(root/img/pic.jpg);&quot;&gt; &lt;/p&gt;，</div></pre></td></tr></table></figure></p>
<p>段落的背景图片样式属性的路径必须使用斜杠，反斜杠无效。<br>涉及到本地文件（windows）路径，斜杠反斜杠均可，比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;C:/Users\Administrator/Desktop\1.png&quot; /&gt;</div></pre></td></tr></table></figure></p>
<hr>
<h6 id="2017-2-11-23-37第一次修改"><a href="#2017-2-11-23-37第一次修改" class="headerlink" title="2017.2.11 23:37第一次修改"></a>2017.2.11 23:37第一次修改</h6>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【笔记】斜杠-forward-salash-与反斜杠-back-salash-在路径应用中的区别&quot;&gt;&lt;a href=&quot;#【笔记】斜杠-forward-salash-与反斜杠-back-salash-在路径应用中的区别&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="辨析" scheme="http://www.junqson.xin/categories/%E8%BE%A8%E6%9E%90/"/>
    
    
      <category term="辨析" scheme="http://www.junqson.xin/tags/%E8%BE%A8%E6%9E%90/"/>
    
      <category term="路径" scheme="http://www.junqson.xin/tags/%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>C++指针辨析</title>
    <link href="http://www.junqson.xin/2017/10/26/C-%E6%8C%87%E9%92%88%E8%BE%A8%E6%9E%90/"/>
    <id>http://www.junqson.xin/2017/10/26/C-指针辨析/</id>
    <published>2017-10-26T15:49:40.000Z</published>
    <updated>2018-02-22T10:10:11.770Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="C-指针辨析"><a href="#C-指针辨析" class="headerlink" title="C++指针辨析"></a>C++指针辨析</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">   </div><div class="line"></div><div class="line">    int a1[2];</div><div class="line">    int a2[2];</div><div class="line">    int a3[2];</div><div class="line">    </div><div class="line">    int *p;</div><div class="line">    p=&amp;a1[0];      //a[1]与*(p+1)等价。</div><div class="line">    </div><div class="line">    //pp1是一个指向int [2]的指针，即pp1的类型和&amp;a1是一样的。 a指向的内存长度固定。</div><div class="line">    int pp1[2][2]=&#123;&#123;1,2&#125;,&#123;1,2&#125;&#125;;</div><div class="line">     //pp2是一个指向int *的指针，即pp2的类型和&amp;pp1是一样的。pp指向的内存长度不固定。                </div><div class="line">    int *pp2[3]=&#123;a1,a2,a3&#125;;</div><div class="line">     //pp3是一个指向int [2]的指针，即pp2的类型和&amp;a1是一样的；</div><div class="line">    int (*pp3)[2]=&amp;a1;</div><div class="line">     //pp4是一个指向int *的指针，即pp4的类型和&amp;pp1是一样的；       </div><div class="line">    int **pp4;</div><div class="line">              </div><div class="line">     //可以，类型匹配。         </div><div class="line">    pp1=pp3;</div><div class="line">    pp2=pp4;</div><div class="line">    </div><div class="line">    //不可以。编译错误，无法从int (*)[2]转换为int **！               </div><div class="line">    pp1=pp4;</div><div class="line">    pp2=pp3;</div><div class="line"></div><div class="line">    int (*ps)[2]=&amp;a3;</div><div class="line">    a3[1]=10; </div><div class="line">    cout&lt;&lt;ps[0][1];</div><div class="line">    cout&lt;&lt;*(*ps+1);</div><div class="line">    //*(*ps+1)=ps[0][1]=*(*(ps+0)+1)=a3[1];</div><div class="line">   </div><div class="line"></div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h6 id="第一次修改：2016-12-31-0-04"><a href="#第一次修改：2016-12-31-0-04" class="headerlink" title="第一次修改：2016-12-31 0:04"></a>第一次修改：2016-12-31 0:04</h6><h6 id="第二次修改：2017-1-4-22-07"><a href="#第二次修改：2017-1-4-22-07" class="headerlink" title="第二次修改：2017/1/4 22:07"></a>第二次修改：2017/1/4 22:07</h6>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;C-指针辨析&quot;&gt;&lt;a href=&quot;#C-指针辨析&quot; class=&quot;headerlink&quot; title=&quot;C++指针辨析&quot;&gt;&lt;/a&gt;C++指针辨析&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
      <category term="辨析" scheme="http://www.junqson.xin/categories/%E8%BE%A8%E6%9E%90/"/>
    
    
      <category term="C++" scheme="http://www.junqson.xin/tags/C/"/>
    
      <category term="指针" scheme="http://www.junqson.xin/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>【笔记】equals方法重写、相等性测试和继承</title>
    <link href="http://www.junqson.xin/2017/10/26/%E3%80%90%E7%AC%94%E8%AE%B0%E3%80%91equals%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E3%80%81%E7%9B%B8%E7%AD%89%E6%80%A7%E6%B5%8B%E8%AF%95%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <id>http://www.junqson.xin/2017/10/26/【笔记】equals方法重写、相等性测试和继承/</id>
    <published>2017-10-26T15:05:44.000Z</published>
    <updated>2018-02-22T10:07:57.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【笔记】equals方法重写、相等性测试和继承"><a href="#【笔记】equals方法重写、相等性测试和继承" class="headerlink" title="【笔记】equals方法重写、相等性测试和继承"></a>【笔记】equals方法重写、相等性测试和继承</h1><h3 id="一、equals方法重写"><a href="#一、equals方法重写" class="headerlink" title="一、equals方法重写"></a>一、equals方法重写</h3><p>Object类中的equals方法用于检测两个对象是否相等，默认操作为检测两个对象是否具有相同的引用。在Object的子类中一般覆盖equals方法（比如String类），多用于检测两个对象的状态是否相等。<br>重写equals方法，一般采取以下步骤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public booleanequals(Object other)&#123;</div><div class="line">    //如果两个对象具有相同的引用则返回true，这是一条优化</div><div class="line">    if (this==other) return true;</div><div class="line">    //如果other为null，返回false</div><div class="line">    if (other==null) return false;</div><div class="line">    //如果两个对象不属于同一个类，返回false</div><div class="line">    if (getClass()!=other.getClass()) return false;</div><div class="line">    //现在可以确定两个对象属于同一个类，进行类型转换，假设this属于Person类</div><div class="line">    Person oth=(Person)other;</div><div class="line">    //依次判断实例域是否相等</div><div class="line">    return field1.equals(oth.field1)&amp;&amp;(field2==oth.field2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在覆盖equals方法时，必须使方法名和形参列表和父类一致，由方法名和参数列表组成的方法签名在方法重载起到关键作用，意味着以下写法是不允许的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public boolean equals(Object oth)&#123;&#125;</div><div class="line">public int equals(Object oth)&#123;&#125;</div></pre></td></tr></table></figure>
<p>我们可以使用@Override来标记被重写的方法，如果方法没有被成功重写，则会给出错误报告，这是一个有效避免错误的小技巧。<br>在判断实例域时，当实例域为对象时应该使用Objects.equals方法，以避免空指针异常，比如上面代码最后一行应改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return Objects.equals(field1,field2)&amp;&amp;(field2==oth.field2);</div></pre></td></tr></table></figure>
<p>使用该方法需要导入java.util.Objects,如果两个参数都为null，返回true；如果仅有一个为null，返回false，否则调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">para1.equals(para2);</div></pre></td></tr></table></figure>
<p>该方法源码实现摘录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static boolean equals(Object a,Object b)&#123;</div><div class="line"></div><div class="line">    return (a == b) || (a != null &amp;&amp; a.equal=s(b)); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、相等测试和继承"><a href="#二、相等测试和继承" class="headerlink" title="二、相等测试和继承"></a>二、相等测试和继承</h3><p>如果两个参数不属于一个类，问题就会变得复杂。很多人单纯使用instanceof进行测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(!(otherinstanceof thisObj)) return false;</div></pre></td></tr></table></figure></p>
<p>不过这么做并没有解决other是thisObj子类的对象的问题，而且违反了equals方法的对称性，Java语言规范要求equals方法的对称性：当且仅当x.equals(y);返回true，y.equals(x);也应该返回true。如果son和父类father共同的域相等且子类中重写了equals方法，按照（一）中的方法，faher.equals(son)会返回true，而son.equals(father)则会返回false，这显然是不合适的。<br>为了改进这个问题，写出更完美的equals方法，可以进行以下判断：</p>
<ul>
<li>如果相等的概念由父类决定，可以使用instanceof进行检测，这样还有利于检测由父类派生出的多个子类的对象之间的相等性。</li>
<li>如果相等的概念由子类决定，equals方法的对称性强制使用getClass()进行检测。</li>
</ul>
<p>在对代码进行修改时，如果相等的概念由子类决定则（一）中代码保持不变。如果相等的概念由父类决定，那么（一）中在判断完other不为null后的第三步改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if(!(otherinstanceof Person)) return false;</div></pre></td></tr></table></figure></p>
<hr>
<p>2017.7.31 18:00第一次编辑</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【笔记】equals方法重写、相等性测试和继承&quot;&gt;&lt;a href=&quot;#【笔记】equals方法重写、相等性测试和继承&quot; class=&quot;headerlink&quot; title=&quot;【笔记】equals方法重写、相等性测试和继承&quot;&gt;&lt;/a&gt;【笔记】equals方法重写、相等
    
    </summary>
    
      <category term="Java" scheme="http://www.junqson.xin/categories/Java/"/>
    
    
      <category term="JavaSE" scheme="http://www.junqson.xin/tags/JavaSE/"/>
    
  </entry>
  
</feed>
